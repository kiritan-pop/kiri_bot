# -*- coding: utf-8 -*-

from mastodon import Mastodon, StreamListener
from pprint import pprint as pp
import requests
import re, os, json, random, unicodedata, signal, sys
import threading, queue, urllib
from time import sleep
from pytz import timezone
import dateutil
from datetime import datetime,timedelta
import warnings, traceback
from os.path import join, dirname
from collections import defaultdict, Counter
from dotenv import load_dotenv
import wikipedia
import GenerateText, bottlemail, Toot_summary
import kiri_util, kiri_game, kiri_romasaga, kiri_deep, kiri_kishou, kiri_tenki, kiri_stat
from PIL import Image, ImageOps, ImageFile, ImageChops, ImageFilter, ImageEnhance
import argparse
ImageFile.LOAD_TRUNCATED_IMAGES = True

MASTER_ID = 'kiritan'
BOT_ID = 'kiri_bot01'
DELAY = 2
pat1 = re.compile(r' ([!-~„ÅÅ-„Çì„Ç°-„É≥] )+|^([!-~„ÅÅ-„Çì„Ç°-„É≥] )+| [!-~„ÅÅ-„Çì„Ç°-„É≥]$',flags=re.MULTILINE)  #[!-~0-9a-zA-Z„ÅÅ-„Çì„Ç°-„É≥Ôºê-ÔºôÔΩÅ-ÔΩö]
pat2 = re.compile(r'[ÔΩóÔºÅÔºü!\?]')
abc = list("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!?.()+-=,")

#.env„Éï„Ç°„Ç§„É´„Åã„Çâ„Éà„Éº„ÇØ„É≥„Å®„ÅãURL„ÇíÂèñÂæó„ÉºÔºÅ
dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)
MASTODON_URL = os.environ.get("MASTODON_URL")
MASTODON_ACCESS_TOKEN = os.environ.get("MASTODON_ACCESS_TOKEN")
# BING_KEY = os.environ.get("BING_KEY")
GOOGLE_KEY = os.environ.get("GOOGLE_KEY")
GOOGLE_ENGINE_KEY = os.environ.get("GOOGLE_ENGINE_KEY")

KISHOU_WS = os.environ.get("KISHOU_WS")
KISHOU_WS_PORT = os.environ.get("KISHOU_WS_PORT")

wikipedia.set_lang("ja")
wikipedia.set_user_agent("kiri_bot (https://github.com/kiritan-pop/kiri_bot/)")

#ÂæóÁÇπÁÆ°ÁêÜ„ÄÅÊµÅÈÄüÁõ£Ë¶ñ
SM = kiri_util.ScoreManager()
CM = kiri_util.CoolingManager(3)
DAO = kiri_util.DAO_statuses()
TRANS = kiri_util.trans(GOOGLE_KEY)
#„Åó„Çä„Å®„ÇäÁî®
StMG = kiri_game.Siritori_manager()

publicdon = Mastodon(api_base_url=MASTODON_URL)  # „Ç§„É≥„Çπ„Çø„É≥„Çπ

mastodon = Mastodon(
    access_token=MASTODON_ACCESS_TOKEN,
    api_base_url=MASTODON_URL)  # „Ç§„É≥„Çπ„Çø„É≥„Çπ

PostQ = queue.Queue()
WorkerQ = queue.Queue()
TimerDelQ = queue.Queue()
StatusQ = queue.Queue()
Toot1bQ = queue.Queue()
DelQ = queue.Queue()
GetNumQ = queue.Queue()
GetNumVoteQ = queue.Queue()
GetNum_flg = []
HintPintoQ = queue.Queue()
HintPinto_ansQ = queue.Queue()
HintPinto_flg = []

slot_bal = []
toot_cnt = 0
TCNT_RESET = 15
acct_least_created_at = {}
pita_list = []

toots_for_rep = defaultdict(list)

# Ëä±ÂÆÖÈÖç„Çµ„Éº„Éì„ÇπÁî®„ÅÆËä±„É™„Çπ„Éà
hanalist = []
for i in range(2048):
    hanalist.append('Ëä±')
for i in range(32):
    hanalist.append('üå∑')
    hanalist.append('üå∏')
    hanalist.append('üåπ')
    hanalist.append('üå∫')
    hanalist.append('üåª')
    hanalist.append('üåº')
for i in range(16):
    hanalist.append('üêΩ')
    hanalist.append('üëÉ')
hanalist.append('üå∑üå∏üåπüå∫üåªüåºÂ§ßÂΩì„Åü„ÇäÔºÅüåºüåªüå∫üåπüå∏üå∑  @%s'%MASTER_ID)

jihou_dict = {
    "00":"üïõ",
    "01":"üïê",
    "02":"üïë",
    "03":"üïí",
    "04":"üïì",
    "05":"üïî",
    "06":"üïï",
    "07":"üïñ",
    "08":"üïó",
    "09":"üïò",
    "10":"üïô",
    "11":"üïö",
    "12":"üïõ",
    "13":"üïê",
    "14":"üïë",
    "15":"üïí",
    "16":"üïì",
    "17":"üïî",
    "18":"üïï",
    "19":"üïñ",
    "20":"üïó",
    "21":"üïò",
    "22":"üïô",
    "23":"üïö",
}

# Ê∞óË±°ÊÉÖÂ†±„ÅÆÂèñÂæóÂØæË±°
kishou_target = {
"ÈúáÂ∫¶ÈÄüÂ†±":"VXSE51",
"Á´úÂ∑ªÊ≥®ÊÑèÊÉÖÂ†±ÔºàÁõÆÊíÉÊÉÖÂ†±‰ªò„ÅçÔºâ":"VPHW51",
"Ê∞óË±°ÁâπÂà•Ë≠¶Â†±„ÉªË≠¶Â†±„ÉªÊ≥®ÊÑèÂ†±":"VPWW53",
"Ë®òÈå≤ÁöÑÁü≠ÊôÇÈñìÂ§ßÈõ®ÊÉÖÂ†±":"VPOA50",
"Âô¥ÁÅ´ÈÄüÂ†±":"VFVO56",
"Ê∞óË±°Ë≠¶Â†±„ÉªÊ≥®ÊÑèÂ†±":"VPWW50"  #„ÉÜ„Çπ„ÉàÁî®
}

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--gtime", type=int, default=30)
    parser.add_argument("--htime", type=int, default=20)
    args = parser.parse_args()
    return args

#######################################################
# „Éû„Çπ„Éà„Éâ„É≥Ôº°Ôº∞Ôº©Áî®ÈÉ®ÂìÅ„ÇíÁ∂ôÊâø„Åó„Å¶„ÄÅÈÄöÁü•ÊôÇ„ÅÆÂá¶ÁêÜ„ÇíÂÆüË£Ö„ÉºÔºÅ
class notification_listener(StreamListener):
    def on_notification(self, notification):
        jst_now = datetime.now(timezone('Asia/Tokyo'))
        ymdhms = jst_now.strftime("%Y%m%d %H%M%S")

        if notification["type"] == "mention":
            status = notification["status"]
            CM.count(status['created_at'])
            WorkerQ.put(status)
            vote_check(status)
        elif notification["type"] == "favourite":
            SM.update(notification["account"]["acct"], 'fav', ymdhms)
        elif notification["type"] == "reblog":
            SM.update(notification["account"]["acct"], 'boost', ymdhms)
        elif notification["type"] == "follow":
            SM.update(notification["account"]["acct"], 'boost', ymdhms)
            follow(notification["account"]["id"])
    def on_update(self, status):
        HintPinto_ans_check(status)
        # ÊôÇÈôê„Éà„Ç•„Éº„ÉàÁî®ÔºàËá™ÂàÜ„ÅÆ„Éà„Ç•„Éº„Éà„ÅÆ„ÅøÔºâ
        acct = status["account"]["acct"]
        if acct == BOT_ID:
            TimerDelQ.put(status)

#######################################################
# „Éû„Çπ„Éà„Éâ„É≥Ôº°Ôº∞Ôº©Áî®ÈÉ®ÂìÅ„ÇíÁ∂ôÊâø„Åó„Å¶„ÄÅ„É≠„Éº„Ç´„É´„Çø„Ç§„É†„É©„Ç§„É≥Âèó‰ø°ÊôÇ„ÅÆÂá¶ÁêÜ„ÇíÂÆüË£Ö„ÉºÔºÅ
class ltl_listener(StreamListener):
    def on_update(self, status):
        #mention„ÅØnotification„ÅßÂèó„Åë„Çã„ÅÆ„ÅßLTL„ÅÆ„ÅØ„Çπ„É´„ÉºÔºÅ(ÔΩ¢„Éªœâ„Éª)ÔΩ¢ ‰∫åÈáç„É¨„ÇπÈò≤Ê≠¢ÔºÅ
        if re.search(r'[^:]@' + BOT_ID, status['content']):
            return
        acct = status["account"]["acct"]
        if acct != BOT_ID:
            WorkerQ.put(status)

#######################################################
# „Çø„Ç§„É†„É©„Ç§„É≥‰øùÂ≠òÁî®ÔºàË™çË®º„Å™„ÅóÔºâ
class public_listener(StreamListener):
    def on_update(self, status):
        StatusQ.put(status)
        CM.count(status['created_at'])

    def on_delete(self, status_id):
        jst_now = datetime.now(timezone('Asia/Tokyo'))
        ymdhms = jst_now.strftime("%Y%m%d %H%M%S")
        print("{0}===public_listener on_delete„Äê{1}„Äë===".format(ymdhms,str(status_id)))
        DelQ.put(status_id)

#######################################################
# „Éà„Ç•„Éº„ÉàÂá¶ÁêÜ
def toot(toot_now, g_vis='direct', rep=None, spo=None, media_ids=None, interval=0):
    def qput(toot_now, g_vis, rep, spo, media_ids):
        PostQ.put((exe_toot,(toot_now, g_vis, rep, spo, media_ids)))

    th = threading.Timer(interval=interval,function=qput,args=(toot_now, g_vis, rep, spo, media_ids))
    th.start()

def exe_toot(toot_now, g_vis='direct', rep=None, spo=None, media_ids=None, interval=0):
    if spo:
        spo_len = len(spo)
    else:
        spo_len = 0
    if rep != None:
        try:
            mastodon.status_post(status=toot_now[0:490-spo_len], visibility=g_vis, in_reply_to_id=rep, spoiler_text=spo, media_ids=media_ids)
        except Exception:
            sleep(2)
            mastodon.status_post(status=toot_now[0:490-spo_len], visibility=g_vis, in_reply_to_id=None, spoiler_text=spo, media_ids=media_ids)
    else:
        mastodon.status_post(status=toot_now[0:490-spo_len], visibility=g_vis, in_reply_to_id=None, spoiler_text=spo, media_ids=media_ids)

    jst_now = datetime.now(timezone('Asia/Tokyo'))
    ymdhms = jst_now.strftime("%Y%m%d %H%M%S")
    print("%süÜïtoot:"%ymdhms + toot_now[0:300] + ":" + g_vis )

#######################################################
# „Éï„Ç°„ÉúÂá¶ÁêÜ
def fav_now(id):  # „Éã„Ç≥„Çä„Åæ„Åô
    PostQ.put((exe_fav_now,(id,)))

def exe_fav_now(id):  # „Éã„Ç≥„Çä„Åæ„Åô
    try:
        status = mastodon.status(id)
    except Exception as e:
        print(e)
    else:
        if status['favourited'] == False:
            th = threading.Timer(interval=2,function=mastodon.status_favourite,args=(id,))
            th.start()
            jst_now = datetime.now(timezone('Asia/Tokyo'))
            ymdhms = jst_now.strftime("%Y%m%d %H%M%S")
            print("%süôÜFav"%ymdhms)

#######################################################
# „Éñ„Éº„Çπ„Éà
def boost_now(id):  # „Å∂„Éº„Åô„Å®ÔºÅ
    PostQ.put((exe_boost_now,(id,)))

def exe_boost_now(id):  # „Å∂„Éº„Åô„Å®ÔºÅ
    try:
        status = mastodon.status(id)
    except Exception as e:
        print(e)
    else:
        if status['reblogged'] == False:
            mastodon.status_reblog(id)
        else:
            mastodon.status_unreblog(id)
            sleep(DELAY)
            mastodon.status_reblog(id)
        print("üôÜboost")

#######################################################
# „Éñ„Éº„Ç≠„É£„É≥
def boocan_now(id):  # „Å∂„Éº„Åô„Å®ÔºÅ
    PostQ.put((exe_boocan_now,(id,)))

def exe_boocan_now(id):  # „Å∂„Éº„Åô„Å®ÔºÅ
    status = mastodon.status(id)
    if status['reblogged'] == True:
        mastodon.status_unreblog(id)
        print("üôÜunboost")

#######################################################
# „Éï„Ç©„É≠„Éº
def follow(id):
    PostQ.put((exe_follow,(id,)))

def exe_follow(id):
    mastodon.account_follow(id)
    print("‚ô•follow")

#######################################################
# „Éà„Ç•„ÉºÊ∂à„Åó
def toot_delete(id,interval=5):
    def qput(id):
        PostQ.put((exe_toot_delete,(id,)))

    th = threading.Timer(interval=interval,function=qput,args=(id,))
    th.start()

def exe_toot_delete(id):
    mastodon.status_delete(id)
    print("‚ô•toot delete")

#######################################################
# Êï∞Âèñ„Çä„Ç≤„Éº„É† ÊäïÁ•®ÂâçÂá¶ÁêÜ
def vote_check(status):
    acct = status["account"]["acct"]
    id = status["id"]
    if re.search(r'[^:]@%s'%BOT_ID, status['content']):
        if len(kiri_util.hashtag(status['content'])) > 0:
            return
        content = kiri_util.content_cleanser(status['content'])
        if len(content) == 0:
            return
        if acct == 'twotwo' and re.search(r'!', content):
            if len(GetNum_flg) > 0:
                twocnt = content.count('„Éà„Ç•')
                GetNumVoteQ.put([acct, id, int(101 - twocnt)])
            else:
                toot('@%s\n‚Çç‚Çç ‚óù(‚óç‚Ä¢·¥ó‚Ä¢‚óç)‚óü‚Åæ‚Åæ‰ªä„ÅØÊï∞Âèñ„Çä„Ç≤„Éº„É†„Åó„Å¶„Å™„ÅÑ„Çà„Äú'%acct, g_vis='unlisted', rep=id)
        else:
            if len(GetNum_flg) > 0:
                if content.strip().isdigit():
                    GetNumVoteQ.put([acct,id,int(content.strip())])
            else:
                if content.strip().isdigit():
                    toot('@%s\n‚Çç‚Çç ‚óù(‚óç‚Ä¢·¥ó‚Ä¢‚óç)‚óü‚Åæ‚Åæ‰ªä„ÅØÊï∞Âèñ„Çä„Ç≤„Éº„É†„Åó„Å¶„Å™„ÅÑ„Çà„Äú'%acct, g_vis='unlisted', rep=id)

#######################################################
# „Éí„É≥„Éà„Åß„Éî„É≥„ÉàÂõûÁ≠îÂèó‰ªò„ÉÅ„Çß„ÉÉ„ÇØ
def HintPinto_ans_check(status):
    acct = status["account"]["acct"]
    id = status["id"]
    content = kiri_util.content_cleanser(status['content'])
    if len(content) == 0 or acct == BOT_ID:
        return
    if len(HintPinto_flg) > 0:
        HintPinto_ansQ.put([acct, id, content.strip()])

#######################################################
# ÁîªÂÉèÂà§ÂÆö
def ana_image(media_attachments,sensitive,acct,g_vis,id,content):
    toot_now = ''
    #Èö†„Åó„Å¶„ÅÇ„ÇãÁîªÂÉè„Å´„ÅØÂèçÂøú„Åó„Å™„ÅÑ„Åì„Å®„Å´„Åó„Åü„Éº
    if sensitive:
        return toot_now

    for media in media_attachments[:1]:
        filename = download(media["url"] , "media")
        result = kiri_deep.takoramen(filename)
        print('   ',result)
        if result == 'other':
            if random.randint(0,50)  == 0:
                if face_search(filename,acct,g_vis,id):
                    return ''
                else:
                    pass
        elif result == 'È¢®ÊôØ' or result == 'Â§úÊôØ':
            if face_search(filename,acct,g_vis,id):
                return ''
            else:
                pass
        elif result == '„Å≠„Åì':
            toot_now += '„Å´„ÇÉ„Éº„Çì'
        elif result == '„ÉÄ„Éº„ÉÑ':
            toot_now += 'üéØ„ÉÄ„Éº„ÉÑÔºÅ'
        elif result == '„Å´„Åò„Åà„Çç':
            toot_now += '„Åà„Å£„Å°ÔºÅ'
        elif result == '„Ç§„É©„Çπ„ÉàÂ•≥„ÅÆÂ≠ê':
            toot_now += '„Åã„Çè„ÅÑ„ÅÑÔºÅ'
        elif result == '„Ç§„É©„Çπ„ÉàÁî∑':
            toot_now += '„Åã„Å£„Åì„ÅÑ„ÅÑÔºÅ'
        elif result == '„Ç§„É©„Çπ„ÉàÁ∑öÁîª':
            toot_now += 'Ëâ≤Â°ó„Å£„Å¶„ÉºÔºÅ'
        elif result == '„Çç„Å≥„Åô„Å¶':
            toot_now += 'üôè„Çç„Å≥„Åô„Å¶„Å®„ÅÜ„Å®„ÅÑÔºÅ'
        elif result == 'Êº´Áîª':
            toot_now += '„Åù„Çå„Å™„Çì„Å¶Êº´Áîª„ÉºÔºü'
        elif result in  ['Ê±öÈÉ®Â±ã','ÈÉ®Â±ã','Ëá™ÊíÆ„Çä','Â§™„ÇÇ„ÇÇ']:
            toot_now += result + '„Å†„ÉºÔºÅ'
        elif result == '„Éù„Éó„ÉÜ„Éî„Éî„ÉÉ„ÇØ':
            toot_now += '„Åù„Çå„Éù„Éó„ÉÜ„Éî„Éî„ÉÉ„ÇØ„ÉºÔºü'
        elif result == 'ÈõªËªä':
            toot_now += 'üöÉüöÉ„Åå„Åü„Çì„Åî„Å®„ÇìÔºÅ'
        elif result == 'ÁúüÁ¥Ö':
            toot_now += '„ÇÅ„ÅÑ„ÇÅ„ÅÑ„Å™„ÅÆ„Å†„ÇèÔºÅ'
        elif result == 'ÁµêÊúà„ÇÜ„Åã„Çä':
            toot_now += '„ÇÜ„Åã„Çä„Åï„ÇìÔºÅ'
        elif result == 'Áúü‰∏≠„Çâ„ÅÅ„Çâ':
            toot_now += '„Åã„Åó„Åì„ÅæÔºÅ'
        elif result == 'È≠ÇÈ≠ÑÂ¶ñÂ§¢':
            toot_now += '„Åø„Çá„ÇìÔºÅ'
        elif result == '‰øùÁôªÂøÉÊÑõ':
            toot_now += '„Åì„Åì„Çç„Å¥„Çá„Çì„Å¥„Çá„ÇìÔºÅ'
        elif result == 'Â§©„ÄÖÂ∫ßÁêÜ‰∏ñ':
            toot_now += '„Åì„Åì„Çç„Å¥„Çá„Çì„Å¥„Çá„ÇìÔºÅ'
        elif result == 'È¶ôÈ¢®Êô∫‰πÉ':
            toot_now += '„ÉÅ„Éé„Å°„ÇÉ„ÇìÔºÅ'
        elif result == 'Ê°êÈñìÁ¥óË∑Ø':
            toot_now += '„Åì„Åì„Çç„Å¥„Çá„Çì„Å¥„Çá„ÇìÔºÅ'
        elif result == 'ÂÆáÊ≤ªÊùæÂçÉÂ§ú':
            toot_now += '„Åì„Åì„Çç„Å¥„Çá„Çì„Å¥„Çá„ÇìÔºÅ'
        elif result == '„Çã':
            toot_now += '„Ç§„É≥„Éâ‰∫∫Ôºü'
        elif result == '„Çπ„ÇØ„Ç∑„Éß':
            if random.randint(0,4) == 0:
                toot_now += 'üì∑„Çπ„ÇØ„Ç∑„Éß„Éë„Ç∑„É£„Éë„Ç∑„É£ÔºÅ'
        else:
            if '„ÉÅ„Éß„Ç≥' in result or '„Ç∑„Éß„Ç≥„É©' in result:
                toot_now += ':@%s: üöìüöìüöìÔºú„ÅÜ„Äú„ÅÜ„ÄúÔºÅÈ£Ø„ÉÜ„É≠Ë≠¶ÂØü „ÉÅ„Éß„Ç≥„É¨„Éº„Éà‰øÇ„Åß„Éº„ÅôÔºÅ\n'%(acct)
            else:
                toot_now += ':@%s: üöìüöìüöìÔºú„ÅÜ„Äú„ÅÜ„ÄúÔºÅÈ£Ø„ÉÜ„É≠Ë≠¶ÂØü %s‰øÇ„Åß„Éº„ÅôÔºÅ\n'%(acct,result)
            break

    return toot_now

#######################################################
# È°î„Éû„Éº„ÇØ
def face_search(filename, acct, g_vis, id):
    media_files = []
    try:
        tmp = kiri_util.face_search(filename)
        if tmp:
            if tmp.rsplit('.')[-1] == 'jpg':
                ex = 'jpeg'
            else:
                ex = tmp.rsplit('.')[-1]
            media_files.append(mastodon.media_post(tmp, 'image/' + ex))
            toot_now = "@%s \n#exp15m"%acct
            toot(toot_now, g_vis=g_vis, rep=None, spo='„Åä„Çè„Åã„Çä„ÅÑ„Åü„Å†„Åë„Çã„Å†„Çç„ÅÜ„Åã‚Ä¶‚Ä¶', media_ids=media_files, interval=5)
            return True
    except Exception as e:
        print(e)
        kiri_util.error_log()

#######################################################
# „ÉØ„Éº„Ç´„ÉºÂá¶ÁêÜ„ÅÆÂÆüË£Ö
def worker(status):
    global toot_cnt
    id = status["id"]
    acct = status["account"]["acct"]
    username = "@" +  acct
    g_vis = status["visibility"]
    content = kiri_util.content_cleanser(status['content'])
    # hashtags = kiri_util.hashtag(status['content'])
    # if 'application' not in status or status['application'] == None:
    #     application = ''
    # else:
    #     application = status['application']['name']
    statuses_count = status["account"]["statuses_count"]
    spoiler_text = status["spoiler_text"]
    ac_created_at = status["account"]["created_at"]
    ac_created_at = ac_created_at.astimezone(timezone('Asia/Tokyo'))
    ac_ymd = ac_created_at.strftime("%Y%m%d")
    jst_now = datetime.now(timezone('Asia/Tokyo'))
    now_ymd = jst_now.strftime("%Y%m%d")
    media_attachments = status["media_attachments"]
    sensitive = status['sensitive']
    created_at = status['created_at']
    created_at = created_at.astimezone(timezone('Asia/Tokyo'))

    #bot„ÅØ„Çπ„É´„Éº
    if status["account"]["bot"]:
        return

    botlist = set([tmp.strip() for tmp in open('.botlist').readlines()])
    botlist.add(BOT_ID)
    if  acct in botlist:
        return

    a = int(CM.get_coolingtime())
    rnd = random.randint(0,5+a)
    if acct == MASTER_ID:
        rnd = 0

    if len(content) <= 0:
        return
    if  Toot1bQ.empty():
        content_1b, acct_1b = None,None
    else:
        content_1b, acct_1b = Toot1bQ.get() #„Ç≠„É•„Éº„Åã„ÇâÔºëÂõûÂâç„ÇíÂèñÂæó
    #
    Toot1bQ.put((content, acct))

    if re.search(r"^(Á∑äÊÄ•|Âº∑Âà∂)(ÂÅúÊ≠¢|ÁµÇ‰∫Ü)$", content) and acct == MASTER_ID:
        print("ÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÁ∑äÊÄ•ÂÅúÊ≠¢„Åó„Åü„Çà„ÉºÔºÅÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºäÔºä")
        toot("@%s Á∑äÊÄ•ÂÅúÊ≠¢„Åó„Åæ„Éº„ÅôÔºÅ"%MASTER_ID, 'direct', id ,None)
        sleep(10)
        os.kill(os.getpid(), signal.SIGKILL)

#   ÂÆöÊúü„Éà„Ç•„Éº„Éà
    toot_cnt += 1
    if toot_cnt >= (TCNT_RESET + random.randint(-(3+a),2)):
        toot_cnt = 0
        lstm_tooter()

    ############################################################
    # ÂÆöÂûãÊñáÂøúÁ≠îÂá¶ÁêÜ
    toot_now = ''
    id_now = id
    vis_now = g_vis
    interval = 0
    if re.search(r"^Ë≤û$", content):
        if content_1b != None and acct == acct_1b:
            SM.update(acct, 'func',score=-1)
            if re.search(r"^Ê≤ª$", content_1b):
                SM.update(acct, 'func',score=2)
                if rnd <= 8:
                    toot_now = '„ÄÄ„ÄÄ‰∏â(  „Å£ÀÉÃµ·¥óÀÇÃµ) ÈÄö„Çä„Åæ„Éº„ÅôÔºÅ'
                    id_now = None

    #„Éç„Ç§„ÉÜ„Ç£„Ç™„ÅåÂçäËßí„Çπ„Éö„Éº„ÇπÂå∫Âàá„Çä„ÅßÔºï„Å§‰ª•‰∏ä„ÅÇ„Çå„Å∞ÁøªË®≥
    if (acct == MASTER_ID or acct == 'twotwo') and len(content.split(' ')) > 4 and content.count('„Éà„Ç•') > 4 and content.count('„Éº') > 0:
        toot_now = ':@%s: Ôºú„Äå'%acct + kiri_util.two2jp(content) + '„Äç'
        id_now = None
        SM.update(acct, 'func')
    if statuses_count != 0 and  statuses_count%10000 == 0:
        interval = 180
        toot_now = username + "\n"
        toot_now += "„ÅÇÔºÅ„Åù„ÅÜ„ÅÑ„Åà„Å∞„Åï„Å£„Åç{0:,}„Éà„Ç•„Éº„Éà„Å†„Å£„Åü„Çà„ÉºÔºÅ".format(statuses_count)
        id_now = None
        SM.update(acct, 'func')
    elif statuses_count == 1 and ac_ymd == now_ymd:
        interval = 5
        toot_now = username + "\n"
        toot_now += "Êñ∞Ë¶è„Åï„Çì„ÅÑ„Çâ„Å£„Åó„ÇÉ„Éº„ÅÑÔºÅüçµüç°„Å©„ÅÜ„Åû„ÉºÔºÅ"
        vis_now = 'unlisted'
        SM.update(acct, 'func')
    elif re.search(r"Ëçâ$", content+spoiler_text):
        SM.update(acct, 'func',score=-1)
        if rnd <= 1:
            # toot_now = ":" + username + ": "
            toot_now = random.choice(hanalist) #+ ' ‰∏âüí® ÔæãÔæüÔΩ≠Ôæù!!'
            id_now = None
    elif re.search(r"Ëä±$", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 1:
            tmp = []
            tmp.append('Êú®')
            tmp.append('Ê£Æ')
            tmp.append('Á®Æ')
            toot_now = random.choice(tmp)
            id_now = None
    elif re.search(r"^:twitter:.+(((üî•)))$", content, flags=(re.MULTILINE | re.DOTALL)):
        SM.update(acct, 'func')
        if rnd <= 4:
            tmp = []
            tmp.append(':twitter: ÔºúÔæäÔæüÔæÄÔæäÔæüÔæÄÔΩ∞\nÂ∑ù\n\n(((üî•)))')
            tmp.append('(Ôæâ„Éª_„Éª)Ôæâ ÔæÜÔΩπÔæûÔæÉ!‚åí:twitter: ÔºúÔΩ±ÔæòÔΩ∂ÔæûÔæÑÔΩ©!\n(((üî•)))')
            tmp.append('(Ôæâ„Éª_„Éª)Ôæâ ÔæÜÔΩπÔæûÔæÉ!‚åíüçó ÔºúÔΩ±ÔæòÔΩ∂ÔæûÔæÑÔΩ©!\n(((üî•)))')
            toot_now = random.choice(tmp)
            id_now = None
    elif re.search(r"„Éñ„É™„Éñ„É™|„Å∂„Çä„Å∂„Çä|„ÅÜ„Çì[„Å°„Åì]|üí©", content+spoiler_text):
        SM.update(acct, 'func',score=-2)
        if rnd <= 4:
            tmp = []
            tmp.append( r'{{{üåäüåäüåäüåä}}} Ôºú„Åñ„Å∞„Éº„Å£ÔºÅ')
            tmp.append('( ‚Ä¢ÃÅ‡∏Ö‚Ä¢ÃÄ )ÔΩ∏ÔΩØÔΩª')
            tmp.append('„Å£üöΩ')
            toot_now = random.choice(tmp)
            id_now = None
    elif re.search(r"^Êú®$|^Êûó$|^Ê£Æ$", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 6:
            tmp = []
            tmp.append(r'{{{üå¥üå¥üå¥üå¥}}} Ôºú„Åô„Åè„Åô„Åè„Éº„Å£ÔºÅ')
            tmp.append(r'{{{üå≤üå≤üå≤üå≤}}} Ôºú„Åô„Åè„Åô„Åè„Éº„Å£ÔºÅ')
            tmp.append(r'{{{üå≥üå≥üå≥üå≥}}} Ôºú„Åô„Åè„Åô„Åè„Éº„Å£ÔºÅ')
            toot_now = random.choice(tmp)
            id_now = None
    elif re.search(r"^ÊµÅ„Åó„Å¶$|^Ê∞¥$", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = r'{{{üåäüåäüåäüåä}}} Ôºú„Åñ„Å∞„Éº„Å£ÔºÅ'
            id_now = None
    elif re.search(r"^„Åµ„Åç„Åµ„Åç$|^Á´úÂ∑ª$|^È¢®$", content):
        SM.update(acct, 'func')
        if rnd <= 4:
            tmp = []
            tmp.append('(((üå™üå™üå™üå™)))Ôºú„Åî„Åâ„Äú„Äú„Å£ÔºÅ')
            tmp.append('(((üí®üí®üí®)))[[[üçÉ]]]Ôºú„Å¥„ÇÖ„Äú„Äú„Å£ÔºÅ')
            toot_now = random.choice(tmp)
            id_now = None
    elif re.search(r"^Âáç„Çâ„Åõ„Å¶$|^Ê∞∑$", content):
        SM.update(acct, 'func')
        if rnd <= 2:
            toot_now = '[[[‚ùÑ]]][[[‚ùÑ]]][[[‚ùÑ]]][[[‚ùÑ]]][[[‚ùÑ]]] Ôºú„Ç´„ÉÅ„Ç≥„ÉÅ„Äú„ÉÉÔºÅ'
            id_now = None
    elif re.search(r"^Èõ∑$", content):
        SM.update(acct, 'func')
        if rnd <= 2:
            toot_now = r'{{{‚ö°‚ö°‚ö°‚ö°}}}Ôºú„Ç¥„É≠„Ç¥„É≠„Äú„ÉÉÔºÅ'
            id_now = None
    elif re.search(r"^„Å¨„Çã„ÅΩ$|^[Nn]ull[Pp]ointer[Ee]xception$", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 4:
            toot_now = 'ÔΩ∑ÔæòÔΩØ'
            id_now = None
    elif re.search(r"^ÈÄöÈÅé$", content):
        SM.update(acct, 'func')
        if rnd <= 6:
            tmp = []
            tmp.append('‚äÇ(ÀÉÃµ·éëÀÇÃµ‡πë‚äÉ )ÂΩ°„ÄÄÈòªÊ≠¢ÔºÅ')
            tmp.append('„ÄÄ„Éü(  „Å£ÀÉÃµ·¥óÀÇÃµ)„Å£„ÄÄÈòªÊ≠¢ÔºÅ')
            toot_now = random.choice(tmp)
            id_now = None
    elif re.search(r"3.{0,1}3.{0,1}4", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 6:
            toot_now = 'ÔæÖÔæù :nan:'
            id_now = None
    elif re.search(r"^„Å°„Åè„ÇèÂ§ßÊòéÁ•û$", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 6:
            toot_now = 'ÔæÄÔæûÔΩØ'
            id_now = None
    elif re.search(r"„Éú„É≠„É≥$|„Åº„Çç„Çì$", content):
        SM.update(acct, 'func',score=-2)
        if rnd <= 2:
            toot_now = ':@%s: ‚úÇÔ∏è„ÉÅ„Éß„Ç≠„É≥ÔºÅÔºÅ'%acct
            id_now = None
    elif re.search(r"„Åï„ÇÄ„ÅÑ$|ÂØí„ÅÑ$", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 2:
            toot_now = '(((üî•)))(((üî•)))(((üî•)))\n(((üî•))) :@%s: (((üî•)))\n(((üî•)))(((üî•)))(((üî•))) '%acct
            id_now = None
    elif re.search(r"„ÅÇ„Å§„ÅÑ$|Êöë„ÅÑ$", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 2:
            toot_now = '[[[‚ùÑ]]][[[‚ùÑ]]][[[‚ùÑ]]]\n[[[‚ùÑ]]] :@%s: [[[‚ùÑ]]]\n[[[‚ùÑ]]][[[‚ùÑ]]][[[‚ùÑ]]] '%acct
            id_now = None
    elif re.search(r"^(‰ªä|„ÅÑ„Åæ)„ÅÆ[„Å™|ÁÑ°|„Éä][„Åó|„Ç∑]$", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 4:
            toot_now = ':@%s: üöìüöìüöìÔºú„ÅÜ„Äú„ÅÜ„ÄúÔºÅ„ÅÑ„Åæ„ÅÆ„Å™„ÅóË≠¶ÂØü„Åß„Éº„ÅôÔºÅ'%acct
            id_now = None
    elif re.search(r"„ÉÑ„Ç§„ÉÉ„Çø„Éº|„ÉÑ„Ç§„Éº„Éà|[tT]witter", content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 1:
            toot_now = '„Å§„ÄÅ„Å§„Å§„Å§„ÄÅ„Å§„ÅÑ„Äú„ÄúÔºÅÔºÅÔºüÔºÅÔºüÔºüÔºÅÔºüÔºÅ'
            id_now = None
        elif rnd == 6:
            toot_now = '„Å§„ÅÑ„Äú‚Ä¶‚Ä¶'
            id_now = None
    elif re.search(r"[„Å™Êí´]„Åß„Å¶", content):
        fav_now(id)
        SM.update(acct, 'reply')
    elif re.search(r"„Å™„Çì„Åß„ÇÇ|‰Ωï„Åß„ÇÇ",content):
        SM.update(acct, 'func',score=-1)
        if rnd <= 2:
            toot_now = '„ÇìÔºü'
            id_now = None
    elif re.search(r"Ê≥£„ÅÑ„Å¶„Çã|Ê≥£„ÅÑ„Åü|Ê∂ô„ÅåÂá∫[„Çã„Åü(„Åù„ÅÜ)]", content):
        SM.update(acct, 'func')
        if rnd <= 2:
            toot_now = '( *Àä·µïÀã)Ôæâ :@%s: ÔæÖÔæÉÔæûÔæÖÔæÉÔæû'%acct
            id_now = None
    elif re.search(r"^Ê°ê‰πÉ„Åò„ÇÉ„Å™„ÅÑ„Åå$", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = f'Ê°ê‰πÉ„Åò„ÇÉ„Å™„ÅÑ„Å≠„Äú'
            id_now = None
    elif re.search(r"^.+„Åò„ÇÉ„Å™„ÅÑ„Åå$", content+spoiler_text):
        word = re.search(r"^(.+)„Åò„ÇÉ„Å™„ÅÑ„Åå$", content+spoiler_text).group(1)
        SM.update(acct, 'func')
        if rnd <= 6 and len(word) < 10:
            toot_now = f'{word}„Åò„ÇÉ„ÅåÔºÅ'
            id_now = None
    elif re.search(r"ÊÉöÊ∞ó|„Åª„Å£„Åë|„Éõ„ÉÉ„Ç±", content+spoiler_text):
        SM.update(acct, 'func',score=-1)
        if rnd <= 2:
            toot_now = '(((üî•üî•üî•üî•)))Ôºú„Åî„Åâ„Åâ„Åâ„Å£ÔºÅ'
            id_now = None
    elif re.search(r"^ÁáÉ„ÇÑ„Åó„Å¶$|^ÁÅ´$|^ÁÇé$", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = '(((üî•üî•üî•üî•)))Ôºú„Åî„Åâ„Åâ„Åâ„Å£ÔºÅ'
            id_now = None
    elif re.search(r"[„ÅîÂæ°Â§ïÊòºÊúù][È£üÈ£Ø][È£ü„Åü]„Åπ[„Çà„Çã„Åü]|(ËÖπ|„ÅØ„Çâ)[„Å∏Ê∏õ]„Å£„Åü|„Åä(ËÖπ|„Å™„Åã)[Á©∫„Åô]„ÅÑ„Åü|(‰Ωï|„Å™„Å´)[È£ü„Åü]„Åπ„Çà", content):
        SM.update(acct, 'func')
        if rnd <= 3:
            recipe_service(content=content, acct=acct, id=id, g_vis=g_vis)
    elif re.search(r"^.+„Åò„ÇÉ„Å≠[„Åá„Åà]„Åû", content+spoiler_text):
        word = re.search(r"^(.+)„Åò„ÇÉ„Å≠[„Åá„Åà]„Åû", content+spoiler_text).group(1)
        SM.update(acct, 'func')
        if rnd <= 4 and len(word) <= 5:
            toot_now = f'{word}„Åò„ÇÉ„Åû‚Ä¶‚Ä¶{{{{{{üíÉ}}}}}}'
            id_now = None
    elif re.search(r"Ê≠¢„Åæ„Çã„Çì„Åò„ÇÉ„Å≠[„Åá„Åà]„Åû", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 4:
            toot_now = r'Ê≠¢„Åæ„Çã„Çì„Åò„ÇÉ„Åû‚Ä¶‚Ä¶{{{üíÉ}}}'
            id_now = None
    elif re.search(r"[„Åä„Åâ][„Åò„Å¢]|[„Åä„Åâ][„Åò„Å¢]„Åï„Çì", content+spoiler_text):
        SM.update(acct, 'func')
        if rnd <= 4:
            tmp = []
            tmp.append('Ÿ©(`^¬¥‡πë )€∂‰∏âŸ©(‡πë`^¬¥‡πë)€∂‰∏âŸ©( ‡πë`^¬¥)€∂')
            tmp.append('Ÿ©(`^¬¥‡πë )€∂‰∏âŸ©( ‡πë`^¬¥)€∂')
            tmp.append(' ‚Çç‚Çç Ÿ©(‡πë`^¬¥‡πë)€∂ ‚Åæ‚Åæ„Åâ„Å¢„Åâ„Å¢„ÉÄ„É≥„Çπ„Éº„Éº‚ô™')
            tmp.append('Ÿ©(Ÿ©`^¬¥‡πë )‰∏â( ‡πë`^¬¥€∂)€∂')
            toot_now = random.choice(tmp)
            id_now = None
    elif len(media_attachments) > 0 and re.search(r"Ëâ≤[„Å¨Â°ó]„Å£„Å¶", content) == None and re.search(r"„Åç„Çä„Åº.*„Ç¢„Ç§„Ç≥„É≥‰Ωú", content) == None and re.search(r"„Åç„Çä„Åº.*ÈÄèÈÅé„Åó„Å¶", content) == None:
        toot_now = ana_image(media_attachments, sensitive, acct, g_vis, id_now, content)
        id_now = None
        interval = 0
    elif re.search(r"^„ÅÜ$", content):
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = '„Åà'
            id_now = None
    elif re.search(r"^„ÅÜ„Å£$", content):
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = '„Åà„Å£'
            id_now = None
    elif re.search(r"^„ÅØÔºü$", content):
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = '„Å≤Ôºü'
            id_now = None
    elif "„Éû„Çπ„Éà„Éâ„É≥Èñâ„Åò„Çç" in content:
        toot_now = '„ÅØ„ÅÑ'
        id_now = None
        interval = random.uniform(0.01,0.7)
    elif "(‡∏á ÀÜ·¥óÀÜ)‡∏ß" in content:
        SM.update(acct, 'func')
        if rnd <= 6:
            toot_now = '‚óù( „Éª_„Éª)‚óü <ÔæãÔæüÔæÄÔΩØ!'
            id_now = None
    elif re.search(r".+„Å®„Åã„Åë„Åæ„Åó„Å¶.+„Å®[„Å®Ëß£]„Åç„Åæ„Åô|.+„Å®„Åã„Åë„Å¶.+„Å®[„Å®Ëß£]„Åè$", content):
        SM.update(acct, 'func',score=2)
        toot_now = '„Åù„ÅÆÂøÉ„ÅØÔºü'
        id_now = None
        interval = 1
    elif re.search(r"^„Åó„Å∞„Å°„ÇÉ„Çì„ÅØ.+[\?Ôºü]$", content) and acct in ['Ko4ba',MASTER_ID]:
        SM.update(acct, 'func')
        toot_now = 'ÔººÁµ∂Â•ΩË™ø„Å´ÁæéÂ∞ëÂ•≥„ÉºÔºÅÔºè'
        interval = 1
        id_now = None
    elif re.search(r"^„Åç„Çä„Åü„Çì„ÅØ.+[\?Ôºü]$", content) and acct == MASTER_ID:
        SM.update(acct, 'func')
        toot_now = 'Ôºº„Åù„Åì„Å´„ÅÑ„Çã„ÉºÔºÅÔºè'
        interval = 1
        id_now = None
    elif re.search(r"^„ÅÇ„ÅÆ„Å≠„ÅÇ„ÅÆ„Å≠", content):
        if rnd <= 6:
            SM.update(acct, 'func')
            toot_now = '„Å™„Å´„Å™„Å´„ÉºÔºü'
            interval = 0
            id_now = None
    elif re.search(r"„Éë„ÇΩ„Ç≥„É≥„Å§„Åë", content) and acct == "12":
            SM.update(acct, 'func')
            if rnd % 2 == 0:
                toot_now = '!„ÅäÂπ¥Áéâ'
            else:
                toot_now = '!„Åä„Åø„Åè„Åò10ÈÄ£'
            interval = 8
            id_now = None
    elif re.search("ÂØù(„Åæ„Åô|„Çã|„Éû„Çπ)([„Çà„Åã„Åû„Å≠]?|[‚Ä¶„ÄÇ„ÅÜ„ÅÖ„ÉºÔΩûÔºÅ„Éª]+)$|^ÂØù(„Åæ„Åô|„Çã|„Çà)[‚Ä¶„ÄÇ„ÅÜ„ÅÖ„ÉºÔΩûÔºÅ„Éª]*$|\
                    ÂØù(„Åæ„Åô|„Çã|„Éû„Çπ)(.*)[„ÅΩ„Åä]„ÇÑ[„É¶„Åô„Åó„Éº]|„Åç„Çä„Åº(.*)[„ÅΩ„Åä]„ÇÑ[„É¶„Åô„Åó„Éº]", content):
        if not re.search("ÂØù„Çã(„Åã„Åü|Êñπ|‰∫∫|„Å≤„Å®|Ê∞ë)", content):
            toot_now = f":@{acct}: „Åä„ÇÑ„Åô„Åø„Äú {random.choice([tmp.strip() for tmp in open('.kaomoji','r').readlines()])}\n#Êå®Êã∂ÈÉ®"
            id_now = None
            interval = 5
    else:
        nicolist = set([tmp.strip() for tmp in open('.nicolist').readlines()])
        if acct in nicolist:
            # rnd = random.randint(0,100)
            # if rnd % 4 == 0:
            fav_now(id_now)
    #
    if len(toot_now) > 0:
        toot(toot_now, vis_now, id_now, None, None, interval)
        return

    if re.search(r"Ê≠ª„Å≠", content+spoiler_text):
        SM.update(acct, 'func',score=-20)
    if re.search(r"^„ÇØ„ÇΩ|„ÇØ„ÇΩ$|[^„ÉÄ]„ÇØ„ÇΩ", content+spoiler_text):
        SM.update(acct, 'func',score=-3)

    ############################################################
    #ÂêÑÁ®ÆÊ©üËÉΩ
    if re.search(r"„Åç„Çä„Åº.*(„Åó„Çä„Å®„Çä).*(„Åó„Çà|„ÇÑ„Çç|„Åä„Å≠„Åå„ÅÑ|„ÅäÈ°ò„ÅÑ)", content):
        fav_now(id)
        if StMG.is_game(acct):
            toot('@%s ‰ªä„ÇÑ„Å£„Å¶„ÇãÔºÅ\n‚Äª„ÇÑ„ÇÅ„ÇãÂ†¥Âêà„ÅØ„Äå„Åó„Çä„Å®„ÇäÁµÇ‰∫Ü„Äç„Å£„Å¶Ë®Ä„Å£„Å¶„Å≠'%acct, 'direct', id, None,interval=2)
            return

        StMG.add_game(acct)
        SM.update(acct, 'func')
        word1,yomi1,tail1 = StMG.games[acct].random_choice()
        result,text = StMG.games[acct].judge(word1)
        toot('@%s „ÄêLv.%d„Äë„Åò„ÇÉ„ÅÇ„ÄÅ%s„Äê%s„Äë„ÅÆ„Äå%s„ÄçÔºÅ\n‚Äª„Åì„ÅÆ„Éà„Ç•„Éº„Éà„Å´„É™„Éó„Åó„Å¶„Å≠ÔºÅ\n‚ÄªDM„Åß„ÅäÈ°ò„ÅÑ„Å≠„ÉºÔºÅ'%(acct,StMG.games[acct].lv,word1,yomi1,tail1) ,
                'direct',  id, None,interval=a)

    elif StMG.is_game(acct) and re.search(r"(„Åó„Çä„Å®„Çä).*(ÁµÇ„Çè|„Åä„Çè|ÁµÇ‰∫Ü|ÂÆå‰∫Ü)", content) and g_vis == 'direct':
        fav_now(id)
        toot('@%s „Åä„Å§„Åã„Çå„Åï„Åæ„ÉºÔºÅ\n(„É©„É™„ÉºÊï∞Ôºö%d)'%(acct, StMG.games[acct].rcnt) , 'direct',  id, None,interval=a)
        StMG.end_game(acct)

    elif StMG.is_game(acct) and g_vis == 'direct':
        fav_now(id)
        word = str(content).strip()
        result,text = StMG.games[acct].judge(word)
        if result:
            if text == 'yes':
                ret_word,ret_yomi,tail = StMG.games[acct].get_word(word)
                if ret_word == None:
                    tmp_score = StMG.games[acct].rcnt*2+StMG.games[acct].lv
                    tmp_score //= 4
                    toot('@%s „ÅÜ„Äú„ÇìÔºÅÊÄù„ÅÑ„Å§„Åã„Å™„ÅÑ„Çà„ÉºÔºÅË≤†„Åë„Åü„ÉºÔºÅ\n(„É©„É™„ÉºÊï∞Ôºö%dÔºè%dÁÇπÁç≤Âæó)'%(acct,StMG.games[acct].rcnt,tmp_score), 'direct',  id, None,interval=a)
                    SM.update(acct, 'getnum', score=tmp_score)
                    StMG.end_game(acct)
                else:
                    result2,text2 = StMG.games[acct].judge(ret_word)
                    if result2:
                        toot('@%s %s„Äê%s„Äë„ÅÆ„Äå%s„ÄçÔºÅ\n(„É©„É™„ÉºÊï∞Ôºö%d)\n‚Äª„Åì„ÅÆ„Éà„Ç•„Éº„Éà„Å´„É™„Éó„Åó„Å¶„Å≠ÔºÅ\n‚ÄªDM„Åß„ÅäÈ°ò„ÅÑ„Å≠„ÉºÔºÅ'%(acct, ret_word, ret_yomi, tail, StMG.games[acct].rcnt), 'direct',  id, None,interval=a)
                    else:
                        tmp_score = StMG.games[acct].rcnt+StMG.games[acct].lv
                        tmp_score //= 2
                        toot('@%s %s„Äê%s„Äë\n%s„Åà„Äú„ÇìË≤†„Åë„Åü„ÉºÔºÅ\n(„É©„É™„ÉºÊï∞Ôºö%dÔºè%dÁÇπÁç≤Âæó)'%(acct, ret_word, ret_yomi,text2, StMG.games[acct].rcnt,tmp_score), 'direct',  id, None,interval=a)
                        SM.update(acct, 'getnum', score=tmp_score)
                        StMG.end_game(acct)

            else:
                #ËæûÊõ∏„Å´„Å™„ÅÑÂ†¥Âêà
                toot('@%s %s\n‚Äª„ÇÑ„ÇÅ„ÇãÂ†¥Âêà„ÅØ„Äå„Åó„Çä„Å®„ÇäÁµÇ‰∫Ü„Äç„Å£„Å¶Ë®Ä„Å£„Å¶„Å≠ÔºÅ\n(„É©„É™„ÉºÊï∞Ôºö%d)'%(acct,text, StMG.games[acct].rcnt), 'direct',  id, None,interval=a)
        else:
            toot('@%s %s\n„Çè„Éº„ÅÑÂãù„Å£„Åü„ÉºÔºÅ\n(„É©„É™„ÉºÊï∞Ôºö%d)'%(acct, text, StMG.games[acct].rcnt), 'direct',  id, None,interval=a)
            StMG.end_game(acct)
    elif re.search(r"[!ÔºÅ]„Çπ„É≠„ÉÉ„Éà", content) and g_vis == 'direct':
        fav_now(id)
        reelsize = 5
        if re.search(r"„Éü„Éã", content):
            slot_rate = 0.1
            reel_num = 4
        else:
            slot_rate = 1
            reel_num = 4

        #ÊâÄÊåÅÈáë„ÉÅ„Çß„ÉÉ„ÇØ
        acct_score = SM.show(acct)[0][1]
        if acct_score < int(slot_rate*3):
            toot('@%s ÂæóÁÇπË∂≥„Çä„Å™„ÅÑ„Çà„ÉºÔºÅÔºàÊâÄÊåÅÔºö%dÁÇπÔºèÂøÖË¶ÅÔºö%dÁÇπÔºâ\n„Çπ„É≠„ÉÉ„Éà„Éü„Éã„ÇÑ‰ªñ„ÅÆ„Ç≤„Éº„É†„ÅßÁ®º„ÅÑ„Åß„Å≠„ÉºÔºÅ'%(acct,acct_score,slot_rate*3), 'direct', rep=id,interval=a)
            return
        #Ë≤™Ê¨≤Ë£úÊ≠£
        slot_bal.append(acct)
        if len(slot_bal) > 100:
            slot_bal.pop(0)
        reelsize += min([sum([1 for x in slot_bal if x==acct])//10 , 5])
        #‰π±Êï∞Ë£úÊ≠£
        reel_num += random.randint(-1,1)
        reelsize += random.randint(-1,1)
        reel_num = min([6,max([4,reel_num])])
        #ÂæóÁÇπÊ∂àË≤ª
        SM.update(acct, 'getnum', score=- int(slot_rate*3))
        #„Çπ„É≠„ÉÉ„ÉàÂõûËª¢
        slot_accts = DAO.get_five(num=reel_num,minutes=120)
        slotgame = kiri_game.Friends_nico_slot(acct,slot_accts,slot_rate,reelsize)
        slot_rows,slot_score = slotgame.start()
        print(' '*20 + 'acct=%s reel_num=%d reelsize=%d'%(acct,reel_num,reelsize))
        sl_txt = ''
        for row in slot_rows:
            for c in row:
                sl_txt += c
            sl_txt += '\n'
        if slot_score > 0:
            SM.update(acct, 'getnum', score=slot_score)
            acct_score = SM.show(acct)[0][1]
            toot('@%s\n%süéØÂΩì„Åü„Çä„ÄúÔºÅÔºÅ%dÁÇπÁç≤Âæó„Åó„Åü„Çà„ÉºÔºÅÔºÅÔºà%dÁÇπÊ∂àË≤ªÔºèÂêàË®à%dÁÇπÔºâ'%(acct, sl_txt, slot_score,int(slot_rate*3),acct_score), 'direct', rep=id, interval=a)
        else:
            acct_score = SM.show(acct)[0][1]
            toot('@%s\n%s„Éè„Ç∫„É¨„Äú„ÄúÔºà%dÁÇπÊ∂àË≤ªÔºèÂêàË®à%dÁÇπÔºâ'%(acct, sl_txt ,int(slot_rate*3),acct_score), 'direct', rep=id, interval=a)

    elif re.search(r"(„Éí„É≥„Éà„Åß„Éî„É≥„Éà)[Ôºö:](.+)", content):
        if g_vis == 'direct':
            word = re.search(r"(„Éí„É≥„Éà„Åß„Éî„É≥„Éà)[Ôºö:](.+)", str(content)).group(2).strip()
            hintPinto_words = []
            if os.path.exists("hintPinto_words.txt"):
                for line in open('hintPinto_words.txt','r'):
                    hintPinto_words.append(line.strip())

            if word in hintPinto_words:
                toot(f'@{acct} „Åì„ÅÆÂâç„ÇÑ„Å£„Åü„ÅäÈ°å„Å™„ÅÆ„ÅßÂà•„ÅÆ„Å´„Åó„Å¶„ÄúÔºÅ', 'direct', rep=id, interval=a)
                return

            if len(word) < 3:
                toot(f'@{acct} „ÅäÈ°å„ÅØÔºìÊñáÂ≠ó‰ª•‰∏ä„Å´„Åó„Å¶„Å≠„Äú', 'direct', rep=id, interval=a)
                return

            hintPinto_words.append(word)
            if len(hintPinto_words) > 10:
                hintPinto_words.pop(0)

            with open('hintPinto_words.txt','w') as f:
                f.write("\n".join(hintPinto_words))

            HintPintoQ.put([acct,id,word])
            SM.update(acct, 'func')
        else:
            toot('@%s Ôº§Ôº≠„Åß‰æùÈ†º„Åó„Å¶„Å≠„ÉºÔºÅÂë®„Çä„ÅÆ‰∫∫„Å´Á≠î„ÅàË¶ã„Åà„Å°„ÇÉ„ÅÜ„Çà„ÉºÔºÅ'%acct, 'direct', rep=id, interval=a)

    elif re.search(r"([„Åº„Éú][„Å®„Éà][„Çã„É´][„É°„ÇÅ]„Éº[„Çã„É´])([„Çµ„Åï]„Éº[„Éì„Å≥][„Çπ„Åô])[Ôºö:]", content):
        print("‚òÖ„Éú„Éà„É´„É°„Éº„É´„Çµ„Éº„Éì„Çπ")
        bottlemail_service(content=content, acct=acct, id=id, g_vis=g_vis)
        SM.update(acct, 'func')
    elif re.search(r"(„Åç„Çá„ÅÜ|‰ªäÊó•)„ÅÆ.?(ÊñôÁêÜ|„Çä„Çá„ÅÜ„Çä)", content):
        recipe_service(content=content, acct=acct, id=id, g_vis=g_vis)
        SM.update(acct, 'func')
    elif re.search(r"\s?(.+)„Å£„Å¶(‰Ωï|„Å™„Å´|„Éä„Éã|Ë™∞|„Å†„Çå|„ÉÄ„É¨|„ÅÑ„Å§|„Å©„Åì)\?$", content):
        word = re.search(r"\s?(.+)„Å£„Å¶(‰Ωï|„Å™„Å´|„Éä„Éã|Ë™∞|„Å†„Çå|„ÉÄ„É¨|„ÅÑ„Å§|„Å©„Åì)\?$", str(content)).group(1)
        SM.update(acct, 'func')
        try:
            word = re.sub(r"„Åç„Çä„Åº.*[„ÄÅ„ÄÇ]","",word)
            page = wikipedia.page(word)
        except  wikipedia.exceptions.DisambiguationError as e:
            # toot('@%s „Äå%s„Äç„Å´„ÅØ„ÅÑ„Åè„Å§„ÅãÊÑèÂë≥„Åå„ÅÇ„Çã„Åø„Åü„ÅÑ„Å†„Å™„Äú'%(acct,word), g_vis, id, None, interval=a)
            nl = "\n"
            toot(f'@{acct} „Äå{word}„Äç„Å´„ÅØ„ÅÑ„Åè„Å§„ÅãÊÑèÂë≥„Åå„ÅÇ„Çã„Åø„Åü„ÅÑ„Å†„Çà„Äú{nl}Ê¨°„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Åß„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë™ø„Åπ„Å¶„Å≠„Äú{nl}{",".join(e.options)}', g_vis, id, None, interval=a)
        except Exception as e:
            print(e)
            toot('@%s „ÅàÔºü„Äå%s„Äç„Åó„Çâ„Å™„Éº„ÅÑÔºÅ'%(acct,word), g_vis, id, None, interval=a)
        else:
            summary_text = page.summary
            if len(acct) + len(summary_text) + len(page.url) > 450:
                summary_text = summary_text[0:450-len(acct)-len(page.url)] + '‚Ä¶‚Ä¶'
            toot('@%s %s\n%s'%(acct, summary_text, page.url), g_vis, id, '„Å™„Å´„Å™„Å´Ôºü„Äå%s„Äç„Å®„ÅØ‚Ä¶‚Ä¶'%word, interval=a)

    elif len(media_attachments) > 0 and re.search(r"Ëâ≤[„Å¨Â°ó]„Å£„Å¶", content + spoiler_text):
        fav_now(id)
        toot(f'@{acct} Ëâ≤Â°ó„Çä„Çµ„Éº„Éì„Çπ„ÅØÁµÇ‰∫Ü„Åó„Åü„Çà„Äú‚Çç‚Çç ‚óù(‚ïπ·óú‚ïπ‡πë‚óù) ‚Åæ‚Åæ ‚Çç‚Çç (‚óü‡πë‚ïπ·óú‚ïπ)‚óü ‚Åæ‚Åæ', g_vis, id, None, interval=a)

    elif len(media_attachments) > 0 and re.search(r"„Åç„Çä„Åº.*„Ç¢„Ç§„Ç≥„É≥‰Ωú", content):
        SM.update(acct, 'func', score=1)
        filename = download(media_attachments[0]["url"], "media")
        if re.search(r"Ê≠£Êúà", content):
            mode = 0
        elif re.search(r"2|Ôºí", content):
            mode = 2
        else:
            mode = 1

        ret = kiri_util.newyear_icon_maker(filename,mode=mode)
        if ret:
            media = mastodon.media_post(ret, 'image/gif')
            toot_now = f"@{acct} „Åß„Åç„Åü„Çà„Äú \n „Åì„Åì„Åßgif„Å´Â§âÊèõ„Åô„Çã„Å®„ÅÑ„ÅÑ„Çà„Äú https://www.aconvert.com/jp/video/mp4-to-gif/ \n#exp15m"
            toot(toot_now, g_vis=g_vis, rep=id, media_ids=[media])
        else:
            toot_now = f"@{acct} ÈÄèÈÅéÁîªÂÉè„Åò„ÇÉ„Å™„ÅÑ„Å®„Å™„Äú"
            toot(toot_now, g_vis=g_vis, rep=id)

    elif len(media_attachments) > 0 and re.search(r"„Åç„Çä„Åº.*ÈÄèÈÅé„Åó„Å¶", content):
        SM.update(acct, 'func', score=1)
        filename = download(media_attachments[0]["url"], "media")
        alpha_image_path = kiri_util.auto_alpha(filename, icon=False)
        media = mastodon.media_post(alpha_image_path, 'image/png')
        toot_now = f"@{acct} „Åß„Åç„Åü„Çà„Äú \n#exp15m"
        toot(toot_now, g_vis=g_vis, rep=id, media_ids=[media])

    elif re.search(r"([„Çè„ÉØ][„Å¶„ÉÜ]|ÊãôÂÉß|Â∞èËÅ∑|ÁßÅ|[„Çè„ÉØ][„Åü„Çø][„Åó„Ç∑]|[„Çè„ÉØ][„Åü„Çø][„Åè„ÇØ][„Åó„Ç∑]|Ëá™ÂàÜ|ÂÉï|[„Åº„Éú][„Åè„ÇØ]|‰ø∫|[„Ç™„Åä][„É¨„Çå]|Êúï|„Å°„Çì|‰Ωô|[„Ç¢„ÅÇ][„Çø„Åü][„Ç∑„Åó]|„Éü„Éº|„ÅÇ„Å°„Åç|„ÅÇ„Å°„Åó|„ÅÇ„Åü„Å°|[„ÅÇ„Ç¢][„Åü„Çø][„ÅÑ„Ç§]|[„Çè„ÉØ][„ÅÑ„Ç§]|„Çè„Å£„Å°|„Åä„ÅÑ„Å©„Çì|[„Çè„ÉØ][„Åó„Ç∑]|[„ÅÜ„Ç¶][„Å°„ÉÅ]|[„Åä„Ç™][„Çâ„É©]|ÂÑÇ|[„Åä„Ç™][„ÅÑ„Ç§][„Çâ„É©]|„ÅÇ„Å†„Åô|Êüê|È∫ø|ÊãôËÄÖ|Â∞èÁîü|„ÅÇ„Å£„Åó|ÊâãÂâç|ÂêæËº©|ÊàëËº©|„Çè„Çâ„Çè|„ÅÖ„ÇÖ|„ÅÆ„Å©„Å´|„Å°„ÇÉ„Åù)„ÅÆ(„É©„É≥„ÇØ|„É©„É≥„Ç≠„É≥„Ç∞|È†Ü‰Ωç|„Çπ„Ç≥„Ç¢|ÊàêÁ∏æ|„Åõ„ÅÑ„Åõ„Åç|„Çâ„Çì„Åè|„Çâ„Çì„Åç„Çì„Åê|„Åô„Åì„ÅÇ)", content):
        show_rank(acct=acct, target=acct, id=id, g_vis=g_vis)
        SM.update(acct, 'func')
    elif re.search(r":@(.+):.*„ÅÆ(„É©„É≥„ÇØ|„É©„É≥„Ç≠„É≥„Ç∞|È†Ü‰Ωç|„Çπ„Ç≥„Ç¢|ÊàêÁ∏æ|„Åõ„ÅÑ„Åõ„Åç|„Çâ„Çì„Åè|„Çâ„Çì„Åç„Çì„Åê|„Åô„Åì„ÅÇ)", content):
        word = re.search(r":@(.+):.*„ÅÆ(„É©„É≥„ÇØ|„É©„É≥„Ç≠„É≥„Ç∞|È†Ü‰Ωç|„Çπ„Ç≥„Ç¢|ÊàêÁ∏æ|„Åõ„ÅÑ„Åõ„Åç|„Çâ„Çì„Åè|„Çâ„Çì„Åç„Çì„Åê|„Åô„Åì„ÅÇ)", str(content)).group(1)
        show_rank(acct=acct, target=word, id=id, g_vis=g_vis)
        SM.update(acct, 'func')
    elif re.search(r"(Êï∞Âèñ„Çä„Ç≤„Éº„É†|„Åã„Åö„Å®„Çä„Åí„Åá„ÇÄ).*(„Åä„Å≠„Åå„ÅÑ|„ÅäÈ°ò„ÅÑ)", content):
        print('Êï∞Âèñ„Çä„Ç≤„Éº„É†Âèó‰ø°')
        if len(GetNum_flg) > 0:
            toot("@%s Êï∞Âèñ„Çä„Ç≤„Éº„É†ÈñãÂÇ¨‰∏≠„Å†„Çà„ÉºÔºÅÊÄ•„ÅÑ„ÅßÊäïÁ•®„Åó„Å¶„ÉºÔºÅ"%acct, 'public', id)
        else:
            fav_now(id)
            GetNumQ.put([acct,id])
            SM.update(acct, 'func')
    elif  '?„Éà„Ç•„Éà„Ç•„Éà„Ç•' in content and acct == 'twotwo': #„Éç„Ç§„ÉÜ„Ç£„Ç™Â∞ÇÁî®
        if len(GetNum_flg) > 0:
            toot("@%s Êï∞Âèñ„Çä„Ç≤„Éº„É†ÈñãÂÇ¨‰∏≠„Å†„Çà„ÉºÔºÅÊÄ•„ÅÑ„ÅßÊäïÁ•®„Åó„Å¶„ÉºÔºÅ"%acct, 'public', id)
        else:
            GetNumQ.put([acct,id])
            SM.update(acct, 'func')
    elif len(content) > 140 and len(content) * 0.8 < sum([v for k,v in Counter(content).items() if k in abc]):
        fav_now(id)
        lang = TRANS.detect(content)
        if lang and lang != 'ja':
            toot_now = TRANS.xx2ja(lang, content)
            if toot_now:
                if re.search(r"[^:]@|^@", toot_now):
                    pass
                else:
                    toot_now +=  "\n#„Åç„ÇäÁøªË®≥ #„Åç„Çä„Åº„Å£„Å®"
                    toot(toot_now, 'public', id, 'ÁøªË®≥„Åó„Åü„Çà„ÄúÔºÅ„Å™„Å´„Å™„Å´‚Ä¶‚Ä¶Ôºü :@%s: Ôºú'%acct ,interval=a)
                    SM.update(acct, 'func')
    elif  'ÁøªË®≥„Åó„Å¶' in spoiler_text:
        fav_now(id)
        toot_now = TRANS.ja2en(content)
        if toot_now:
            if re.search(r"[^:]@|^@", toot_now):
                pass
            else:
                toot_now +=  "\n#„Åç„ÇäÁøªË®≥ #„Åç„Çä„Åº„Å£„Å®"
                toot(toot_now, 'public', id, 'ÁøªË®≥„Åó„Åü„Çà„ÄúÔºÅ :@%s: Ôºú'%acct ,interval=a)
                SM.update(acct, 'func')
    elif len(content) > 140 and len(spoiler_text) == 0:
        gen_txt = Toot_summary.summarize(content,limit=10,lmtpcs=1, m=1, f=4)
        if gen_txt[-1] == '#':
            gen_txt = gen_txt[:-1]
        print('‚òÖË¶ÅÁ¥ÑÁµêÊûúÔºö',gen_txt)
        if is_japanese(gen_txt):
            if len(gen_txt) > 5:
                gen_txt +=  "\n#„Åç„ÇäË¶ÅÁ¥Ñ #„Åç„Çä„Åº„Å£„Å®"
                toot("@" + acct + " :@" + acct + ":\n"  + gen_txt, g_vis, id, "ÂãùÊâã„Å´Ë¶ÅÁ¥Ñ„Çµ„Éº„Éì„Çπ", interval=a)
    elif re.search(r"„Åç„Çä„Åº.+:@(.+):.*„ÅÆÂàù", content):
        target = re.search(r"„Åç„Çä„Åº.+:@(.+):.*„ÅÆÂàù", str(content)).group(1)
        toots = DAO.get_user_toots(target)
        # „Éà„Ç•„Éº„Éà„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
        check_fg = False
        for tid, tcontent, tdate, ttime in toots:
            try:
                status = mastodon.status(tid)
            except:
                sleep(2)
                continue
            else:
                check_fg = True
                tdate = '{0:08d}'.format(tdate)
                ttime = '{0:06d}'.format(ttime)
                ymdhms = f'on {tdate[:4]}/{tdate[4:6]}/{tdate[6:]} at {ttime[:2]}:{ttime[2:4]}:{ttime[4:]}'
                tcontent = kiri_util.content_cleanser(tcontent)

                sptxt = f":@{target}: „ÅÆÂàù„Éà„Ç•„Éº„Éà„ÅØ‚Ä¶‚Ä¶"
                body = f"@{acct} \n"
                body += f":@{target}: Ôºú{tcontent} \n {ymdhms} \n"
                body += f"{MASTODON_URL}/@{target}/{tid}"
                toot(body, g_vis=g_vis, rep=id, spo=sptxt)
                break

        if check_fg == False:
            body = f"@{acct} Ë¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„Åü„Çà„Äúüò¢"
            toot(body, g_vis=g_vis, rep=id)

    elif re.search(r"„Å∏„ÅÑ„Åç„Çä„Åº[!ÔºÅ]?„Åç„Çä„Åü„Çì‰∏º„ÅÆ(Â§©Ê∞ó|Áä∂ÊÖã|Áä∂Ê≥Å|„Çπ„ÉÜ„Éº„Çø„Çπ|status).*(Êïô„Åà„Å¶|„Åä„Åõ„Éº„Å¶)|^!server.*stat", content):
        stats = kiri_stat.sys_stat()
        toot(f"@{acct} \n„Åü„Å†„ÅÑ„Åæ„ÅÆÊ∞óÊ∏©{stats['cpu_temp']}‚ÑÉ„ÄÅÂøô„Åó„Åï{stats['cpu']:.1f}ÔºÖ„ÄÅÊ∞óÊåÅ„Å°„ÅÆ‰ΩôË£ï{stats['mem_available']/(10**9):.1f}GB„ÄÅ„ÇØ„É≠„Éº„Çº„ÉÉ„Éà„ÅÆÁ©∫„Åç{stats['disk_usage']/(10**9):.1f}GB" ,g_vis=g_vis, rep=id)
    elif re.search(r"„Å∏„ÅÑ„Åç„Çä„Åº[!ÔºÅ]?.+„ÅÆ.+„ÅÆÂ§©Ê∞ó.*(Êïô„Åà„Å¶|„Åä„Åõ„Éº„Å¶)", content):
        word1 = re.search(
            r"„Å∏„ÅÑ„Åç„Çä„Åº[!ÔºÅ]?(.+)„ÅÆ(.+)„ÅÆÂ§©Ê∞ó.*Êïô„Åà„Å¶", str(content)).group(1).strip()
        word2 = re.search(
            r"„Å∏„ÅÑ„Åç„Çä„Åº[!ÔºÅ]?(.+)„ÅÆ(.+)„ÅÆÂ§©Ê∞ó.*Êïô„Åà„Å¶", str(content)).group(2).strip()
        if word1 in ["‰ªäÊó•","ÊòéÊó•","ÊòéÂæåÊó•"]:
            tenki_area = word2
            tenki_day = word1
        elif word2 in ["‰ªäÊó•","ÊòéÊó•","ÊòéÂæåÊó•"]:
            tenki_area = word1
            tenki_day = word2
        else:
            return

        sptxt, toot_now = kiri_tenki.get_tenki(quary=tenki_area, day=tenki_day)
        if sptxt == "900":
            toot(f"@{acct} Áü•„Çâ„Å™„ÅÑÂ†¥ÊâÄ„ÅÆÂ§©Ê∞ó„ÅØ„Çè„Åã„Çâ„Å™„ÅÑ„Çà„Äú", g_vis=g_vis, rep=id)
        elif sptxt == "901":
            toot(f"@{acct} Ë§áÊï∞Âú∞Âêç„ÅåË¶ã„Å§„Åã„Å£„Åü„ÅÆ„Åß„ÄÅÊ¨°„ÅÆÂú∞Âêç„Åß„ÇÇ„Å£„Åã„ÅÑÂëº„Çì„Åß„Åø„Å¶„Éº\n{toot_now}", g_vis=g_vis, rep=id)
        else:
            toot_now = f"@{acct}\n" + toot_now
            toot(toot_now, g_vis=g_vis, rep=id, spo=sptxt)

    elif re.search(r'[^:]@%s'%BOT_ID, status['content']):
        SM.update(acct, 'reply')
        if content.strip().isdigit():
            return
        if len(content) == 0:
            return
        fav_now(id)
        toots_for_rep[acct].append((content.strip(),created_at))
        toot_now = "@%s\n"%acct
        seeds = DAO.get_least_10toots(time=True,limit=30)
        seeds.extend(toots_for_rep[acct])
        #ÊôÇÁ≥ªÂàó„ÇΩ„Éº„Éà
        seeds.sort(key=lambda x:(x[1]))
        #ÊñáÂ≠ó„Å†„ÅëÂèñ„ÇäÂá∫„Åó
        tmp = lstm_gen_rapper([c[0] for c in seeds])
        tmp = kiri_util.content_cleanser_light(tmp)
        toot_now += tmp
        toots_for_rep[acct].append((tmp,jst_now))
        toot(toot_now, g_vis, id, None,interval=a)
    elif re.search(r"(„Åç„Çä|„Ç≠„É™).*(„Åº„Å£„Å®|„Éú„ÉÉ„Éà|[bB][oO][tT])|[„Åç„Ç≠][„Çä„É™][„Åº„Éú]", content + spoiler_text):
        SM.update(acct, 'reply')
        if random.randint(0,10+a) > 9:
            return
        fav_now(id)
        toot_now = "@%s\n"%acct
        seeds = DAO.get_least_10toots(limit=30)
        tmp = lstm_gen_rapper(seeds)
        tmp = kiri_util.content_cleanser_light(tmp)
        toot_now += tmp
        toot(toot_now, g_vis, id, None,interval=a)
        SM.update(acct, 'reply')

def lstm_gen_rapper(seeds):
    words = ["„Åä„ÅØ„Çà„ÅÜ","„Åä„ÅØ„Çà„Éº","„Åä„ÅØ„Çà„Äú","„Åä„Å£„Å±„ÅÑ"]
    ret_txt = kiri_deep.lstm_gentxt(seeds).strip()
    for word in words:
        for _ in range(5):
            if ret_txt == word:
                ret_txt = kiri_deep.lstm_gentxt([w for w in seeds if word not in w.strip()])
            else:
                break

    return ret_txt

#######################################################
# Âç≥ÊôÇÂøúÁ≠îÂá¶ÁêÜ„ÉºÔºÅ
def business_contact(status):
    id = status["id"]
    acct = status["account"]["acct"]
    # g_vis = status["visibility"]
    content = kiri_util.content_cleanser(status['content'])
    statuses_count = status["account"]["statuses_count"]
    # spoiler_text = status["spoiler_text"]
    created_at = status['created_at']
    display_name = status["account"]['display_name']
    ac_created_at = status["account"]["created_at"]
    ac_created_at = ac_created_at.astimezone(timezone('Asia/Tokyo'))
    # ac_ymd = ac_created_at.strftime("%Y.%m.%d %H:%M:%S")
    if '@' in acct: #ÈÄ£Âêà„Çπ„É´„Éº
        return        
    #ÊúÄÂæå„Å´„Éà„Ç•„Éº„Éà„Åó„Å¶„Åã„Çâ3ÊôÇÈñì‰ª•‰∏äÔºü 
    if acct in acct_least_created_at:
        ymdhms = acct_least_created_at[acct]
    else:
        ymdhms = DAO.get_least_created_at(acct)

    acct_least_created_at[acct] = created_at
    diff = timedelta(hours=3)

    jst_now = datetime.now(timezone('Asia/Tokyo'))
    jst_now_str = jst_now.strftime("%Y%m%d %H%M%S")
    jst_now_hh = int(jst_now.strftime("%H"))
    print('%s===„Äå%s„Äçby %s'%(jst_now_str,('\n'+' '*20).join(content.split('\n')), acct))

    kaomoji = random.choice([tmp.strip() for tmp in open('.kaomoji','r').readlines()])
    if statuses_count == 1:
        toot_now = f':@{acct}: Ôºà{display_name}Ôºâ„ÅîÊñ∞Ë¶è„Åï„Çì„Åã„ÇÇ„ÉºÔºÅ{kaomoji}\n #Êå®Êã∂ÈÉ®'
        toot(toot_now, g_vis='public',interval=3)
    elif ymdhms == None or ymdhms + diff < created_at:
        fav_now(id)
        aisatsu = "„Åä„Åã„Åà„Çä„ÄúÔºÅ"
        bure = random.randint(-1,1)
        if 0<= jst_now_hh <=3 + bure:
            aisatsu = "„Åì„Çì„Å∞„Çì„ÅØ„ÄúÔºÅ"
        elif 5<= jst_now_hh <=11 + bure:
            aisatsu = "„Åä„ÅØ„Çà„ÄúÔºÅ"
        elif 12<= jst_now_hh <=17 + bure:
            aisatsu = "„Åì„Çì„Å´„Å°„ÅØ„ÄúÔºÅ"
        elif 19<= jst_now_hh <=24:
            aisatsu = "„Åì„Çì„Å∞„Çì„ÅØ„ÄúÔºÅ"

        toot_now = f':@{acct}: {display_name}\n{aisatsu} {kaomoji}\n #Êå®Êã∂ÈÉ®'
        toot(toot_now, g_vis='public',interval=3)

    pita_list.append(created_at)
    if len(pita_list) > 1:
        pita_list.pop(0)

    watch_list = set([kansi_acct.strip() for kansi_acct in open('.watch_list').readlines()])
    if acct in watch_list:
        toot_now = '@%s\n:@%s: %s\n„Äå%s„Äç\n#exp10m'%(MASTER_ID, acct, display_name, content)
        toot(toot_now)

#######################################################
# ÁîªÂÉèÊ§úÁ¥¢„Çµ„Éº„Éì„Çπ
def get_file_name(url):
    return url.split("/")[-1].split("?")[0]

def download(url, save_path):
    ret_path = save_path + "/" + get_file_name(url)
    if os.path.exists(ret_path):
        return ret_path
    req = urllib.request.Request(url)
    req.add_header("User-agent", "kiritan downloader made by @kiritan")
    source = urllib.request.urlopen(req).read()
    with open(ret_path, 'wb') as file:
        file.write(source)
    return ret_path

#######################################################
# Êó•Êú¨Ë™û„Å£„ÅΩ„ÅÑ„Åã„Å©„ÅÜ„ÅãÂà§ÂÆö
def is_japanese(string):
    for ch in string:
        name = unicodedata.name(ch,"other")
        if "CJK UNIFIED" in name  or "HIRAGANA" in name  or "KATAKANA" in name:
            return True
    return False

#######################################################
# „É¨„Ç∑„ÉîÊèêÊ°à
def recipe_service(content=None, acct=MASTER_ID, id=None, g_vis='unlisted'):
    fav_now(id)
    generator = GenerateText.GenerateText(1)
    #ÊñôÁêÜÂêç„ÇíÂèñÂæó„ÉºÔºÅ
    gen_txt = ''
    spoiler = generator.generate("recipe")

    #ÊùêÊñô„Å®ÂàÜÈáè„ÇíÂèñÂæó„ÉºÔºÅ
    zairyos = []
    amounts = []
    for line in open('recipe/zairyos.txt','r'):
        zairyos.append(line.strip())
    for line in open('recipe/amounts.txt','r'):
        amounts.append(line.strip())
    zairyos = random.sample(zairyos, 4)
    amounts = random.sample(amounts, 4)
    gen_txt += 'ÔºúÊùêÊñôÔºû\n'
    for z,a in zip(zairyos,amounts):
        gen_txt += ' „Éª' + z + '\t' + a + '\n'

    #‰Ωú„ÇäÊñπ„ÇíÂèñÂæó„ÉºÔºÅÈÄî‰∏≠„ÅÆÊâãÈ†Ü„Å®ÁµÇ‰∫ÜÊâãÈ†Ü„ÇíÂàÜ„Åë„Å¶ÂèñÂæó„Åô„Çã„Çà„ÉºÔºÅ
    text_chu = []
    text_end = []
    generator = GenerateText.GenerateText(50)
    while len(text_chu) <= 3 or len(text_end) < 1:
        tmp_texts = generator.generate("recipe_text").split('\n')
        for tmp_text in tmp_texts:
            if re.search(r'ÂÆåÊàê|Âá∫Êù•‰∏ä|Âè¨„Åó‰∏ä„Åå|„Åß„Åç„ÅÇ„Åå„Çä|ÊúÄÂæå|ÁµÇ„Çè„Çä',tmp_text):
                if len(text_end) <= 0:
                    text_end.append(tmp_text)
            else:
                if len(text_chu) <= 3:
                    text_chu.append(tmp_text)
    text_chu.extend(text_end)
    gen_txt += 'Ôºú‰Ωú„ÇäÊñπÔºû\n'
    for i,text in enumerate(text_chu):
        gen_txt += ' %d.'%(i+1) + text + '\n'
    gen_txt +=  "\n#„Åç„ÇäÊñôÁêÜÊèêÊ°à„Çµ„Éº„Éì„Çπ #„Åç„Çä„Åº„Å£„Å®"
    toot("@" + acct + "\n" + gen_txt, g_vis, id ,":@" + acct + ": " + spoiler)

#######################################################
# „É©„É≥„ÇØË°®Á§∫
def show_rank(acct=None, target=None, id=None, g_vis=None):
    ############################################################
    # Êï∞Âèñ„Çä„Ç≤„Éº„É†„Çπ„Ç≥„Ç¢„Å™„Å©
    print(f"show_rank target={target}")
    if id:
        fav_now(id)
    sm = kiri_util.ScoreManager()
    score = defaultdict(int)
    like = defaultdict(int)

    for row in sm.show():
        # if row[1] > 0:
        score[row[0]] = row[1]
        like[row[0]] = row[2] + row[4] + row[6] + row[7]

    if acct:
        score_rank = 0
        for i,(k,v) in enumerate( sorted(score.items(), key=lambda x: -x[1])):
            if k == target :
                score_rank = i + 1
                break

        like_rank = 0
        for i,(k,v) in enumerate( sorted(like.items(), key=lambda x: -x[1])):
            if k == target :
                like_rank = i + 1
                break

        toot_now = "@{0}\n:@{1}: „ÅÆ„Çπ„Ç≥„Ç¢„ÅØ‚Ä¶‚Ä¶\n".format(acct,target)
        toot_now += "„Ç≤„Éº„É†ÂæóÁÇπÔºö{0:>4}ÁÇπ({1}/{4}‰Ωç)\n„Åç„Çä„Åº„Å£„Å®Â•ΩÊÑüÂ∫¶Ôºö{2:>4}ÁÇπ({3}/{5}‰Ωç)".format(score[target], score_rank, like[target], like_rank, len(score), len(like))

        hours=[1,24] #,24*31]
        coms=["ÊôÇÈñì","Êó•„ÄÄ"]  #,"„É∂Êúà"]
        for hr,com in zip(hours,coms):
            rank = 0
            cnt = 0
            rows = DAO.get_toots_hours(hours=hr)
            rows.sort(key=lambda x:(-x[1],x[0]))
            for i,(k,v) in enumerate(rows):
                if k == target :
                    rank = i + 1
                    cnt = v
                    break
            toot_now += "\nÁõ¥ËøëÔºë{1}Ôºö{0:,} tootsÔºà{2}/{3}‰ΩçÔºâ".format(cnt,com,rank,len(rows))

        toot(toot_now, g_vis ,id, interval=2)

    else:
        toot_now = "‚ñ†„Ç≤„Éº„É†ÂæóÁÇπ\n"
        spo_text = "„Åç„Çä„Åº„Ç≤„Éº„É†ÔºÜÂ•ΩÊÑüÂ∫¶„É©„É≥„Ç≠„É≥„Ç∞"
        for i, (k, v) in enumerate(sorted(score.items(), key=lambda x: -x[1])):
            toot_now += f"{i+1}‰Ωç :@{k}: {v}ÁÇπ\n"
            if i >= 9:
                break

        toot_now += "\n‚ñ†Â•ΩÊÑüÂ∫¶\n"
        for i, (k, v) in enumerate(sorted(like.items(), key=lambda x: -x[1])):
            toot_now += f"{i+1}‰Ωç :@{k}: {v}ÁÇπ\n"
            if i >= 9:
                break

        toot(toot_now, g_vis='unlisted', spo=spo_text, interval=2)

#######################################################
# „Éú„Éà„É´„É°„Éº„É´„Çµ„Éº„Éì„Çπ„ÄÄ„É°„ÉÉ„Çª„Éº„Ç∏ÁôªÈå≤
def bottlemail_service(content, acct, id, g_vis):
    fav_now(id)
    word = re.search(r"([„Åº„Éú][„Å®„Éà][„Çã„É´][„É°„ÇÅ]„Éº[„Çã„É´])([„Çµ„Åï]„Éº[„Éì„Å≥][„Çπ„Åô])[Ôºö:](.*)", str(content), flags=(re.MULTILINE | re.DOTALL) ).group(3)
    toot_now = "@" + acct + "\n"
    if len(word) == 0:
        toot(toot_now + "‚Çç‚Çç ‚óù(* ,,‘æ‚Ä∏‘æ,, )‚óü ‚Åæ‚Åæ„É°„ÉÉ„Çª„Éº„Ç∏ÂÖ•„Çå„Å¶„ÉºÔºÅ", g_vis ,id,None)
        return
    if len(word) > 300:
        toot(toot_now + "‚Çç‚Çç ‚óù(* ,,‘æ‚Ä∏‘æ,, )‚óü ‚Åæ‚ÅæÈï∑„ÅÑ„Çà„ÉºÔºÅ", g_vis ,id,None)
        return

    bm = bottlemail.Bottlemail()
    bm.bottling(acct,word,id)

    spoiler = "„Éú„Éà„É´„É°„Éº„É´Âèó„Åë‰ªò„Åë„Åü„Çà„ÉºÔºÅ"
    toot_now += "Âèó„Åë‰ªò„Åë„Åü„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„Äå" + word + "„Äç„Å†„Çà„ÉºÔºÅ„ÅÑ„Å§„ÅãÂ±ä„Åè„Åã„ÇâÊ∞óÈï∑„Å´ÂæÖ„Å£„Å¶„Å¶„Å≠„ÉºÔºÅ"
    toot(toot_now, g_vis , id, spoiler)

#######################################################
# „ÉØ„Éº„Ç´„ÉºÂá¶ÁêÜ„ÅÆ„Çπ„É¨„ÉÉ„Éâ
def th_worker():
    try:
        while True:
            status = WorkerQ.get() #„Ç≠„É•„Éº„Åã„Çâ„Éà„Ç•„Éº„Éà„ÇíÂèñ„ÇäÂá∫„Åô„Çà„ÉºÔºÅ„Å™„Åã„Å£„Åü„ÇâÂæÖÊ©ü„Åó„Å¶„Åè„Çå„Çã„ÅØ„Åö„ÉºÔºÅ
            sleep(1.2)
            if WorkerQ.qsize() <= 1: #„Ç≠„É•„Éº„ÅåË©∞„Åæ„Å£„Å¶„Åü„Çâ„Çπ„É´„Éº
                worker(status)
    except Exception as e:
        print(e)
        kiri_util.error_log()
        sleep(30)
        th_worker()

#######################################################
# „ÉØ„Éº„Ç´„ÉºÂá¶ÁêÜ„ÅÆ„Çπ„É¨„ÉÉ„Éâ
def th_timerDel():
    try:
        while True:
            status = TimerDelQ.get() #„Ç≠„É•„Éº„Åã„Çâ„Éà„Ç•„Éº„Éà„ÇíÂèñ„ÇäÂá∫„Åô„Çà„ÉºÔºÅ„Å™„Åã„Å£„Åü„ÇâÂæÖÊ©ü„Åó„Å¶„Åè„Çå„Çã„ÅØ„Åö„ÉºÔºÅ
            id = status["id"]
            acct = status["account"]["acct"]
            hashtags = kiri_util.hashtag(status['content'])

            if acct == BOT_ID:
                sec = 0
                for hashtag in hashtags:
                    if hashtag[:3] == "exp" and hashtag[3:-1].isdigit():
                        time = int(hashtag[3:-1])
                        if hashtag[-1] == "s":
                            pass
                        elif hashtag[-1] == "m":
                            time *= 60
                        elif hashtag[-1] == "h":
                            time *= 60 * 60
                        elif hashtag[-1] == "d":
                            time *= 60 * 60 * 24
                        else:
                            time = 0
                        sec += time
                if sec > 0:
                    toot_delete(id=id, interval=sec)

    except Exception as e:
        print(e)
        kiri_util.error_log()
        sleep(30)
        th_timerDel()


#######################################################
# Èô£ÂΩ¢
def jinkei_tooter():
    spoiler = "ÂãùÊâã„Å´Èô£ÂΩ¢„Çµ„Éº„Éì„Çπ"
    gen_txt = kiri_romasaga.gen_jinkei()
    if gen_txt:
        toot(gen_txt, "public", spo=spoiler)

#######################################################
# „Éú„Éà„É´„É°„Éº„É´„Çµ„Éº„Éì„Çπ„ÄÄÈÖç‰ø°Âá¶ÁêÜ
def bottlemail_sending():
    bm = bottlemail.Bottlemail()
    sendlist = bm.drifting()
    for id,acct,msg,reply_id in sendlist:
        spoiler = ":@" + acct + ": „Åã„Çâüçæ„Éú„Éà„É´„É°„Éº„É´üíåÂ±ä„ÅÑ„Åü„Çà„ÉºÔºÅ"
        random_acct = DAO.sample_acct()
        #„ÅäÂ±ä„ÅëÔºÅ
        toots = "@" + random_acct + "\n:@" + acct + ": Ôºú„Äå" + msg + "„Äç"
        toots +=  "\n‚Äª„Éú„Éà„É´„É°„Éº„É´„Çµ„Éº„Éì„ÇπÔºöÔºú„É°„ÉÉ„Çª„Éº„Ç∏Ôºû„ÄÄ„Åß„ÅÇ„Å™„Åü„ÇÇÈÄÅ„Çå„Çã„Çà„ÉºÔºÅË©¶„Åó„Å¶„Åø„Å¶„Å≠ÔºÅ"
        toots +=  "\n#„Éú„Éà„É´„É°„Éº„É´„Çµ„Éº„Éì„Çπ #„Åç„Çä„Åº„Å£„Å®"
        toot(toots, "direct",reply_id if reply_id != 0 else None, spoiler)
        bm.sended(id, random_acct)

        #Âà∞ÁùÄÈÄöÁü•
        spoiler = ":@" + random_acct + ": „Ååüçæ„Éú„Éà„É´„É°„Éº„É´üíåÂèó„ÅëÂèñ„Å£„Åü„Çà„ÉºÔºÅ"
        toots = "@" + acct + " Â±ä„Åë„Åü„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ‚Ä¶‚Ä¶\n:@" + acct + ": Ôºú„Äå" + msg + "„Äç"
        toots +=  "\n#„Éú„Éà„É´„É°„Éº„É´„Çµ„Éº„Éì„Çπ #„Åç„Çä„Åº„Å£„Å®"
        toot(toots, "direct",reply_id if reply_id != 0 else None, spoiler)

#######################################################
# „Åç„Çä„Åº„Å£„Å®„ÅÆ„Å§„Å∂„ÇÑ„Åç
def lstm_tooter():
    seeds = DAO.get_least_10toots(limit=30)
    if len(seeds) <= 2:
        return
    spoiler = None

    gen_txt = lstm_gen_rapper(seeds)
    gen_txt = kiri_util.content_cleanser_light(gen_txt)
    if gen_txt[0:1] == '„ÄÇ':
        gen_txt = gen_txt[1:]
    if len(gen_txt) > 60:
        spoiler = ':@%s: üí≠'%BOT_ID

    toot(gen_txt, "public", None, spoiler)

#######################################################
# DELETEÊôÇ„ÅÆÂá¶ÁêÜ
def th_delete():
    del_accts = []
    while True:
        try:
            toot_now = '@%s \n'%MASTER_ID
            row = DAO.pickup_1toot(DelQ.get())
            # Âû¢Ê∂à„ÅóÊôÇ„ÅØÂ§ßÈáè„ÅÆ„Éà„Ç•„ÉºÊ∂à„Åó„ÅåÊù•„Çã„ÅÆ„Åß„ÄÅ„Ç≠„É•„Éº„ÅåÊ∫ú„Åæ„Å£„Å¶„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã„Çà„Äú
            if DelQ.qsize() >= 3:
                continue
            print('th_delete:',row)
            if row:
                acct = row[0]
                if acct not in del_accts and acct != BOT_ID:
                    date = '{0:08d}'.format(row[2])
                    time = '{0:06d}'.format(row[3])
                    ymdhms = '%s %s'%(date,time)
                    ymdhms = dateutil.parser.parse(ymdhms).astimezone(timezone('Asia/Tokyo'))
                    toot_now += ':@%s: üöìüöìüöìÔºú„ÅÜ„Äú„ÅÜ„ÄúÔºÅ„Éà„Ç•„ÉºÊ∂à„ÅóË≠¶ÂØü„Åß„Éº„ÅôÔºÅ\n'%row[0]
                    toot_now += ':@%s: Ôºú„Äå%s„Äç at %s\n#exp10m'%(row[0], kiri_util.content_cleanser(row[1]) , ymdhms.strftime("%Y.%m.%d %H:%M:%S"))
                    toot(toot_now, 'direct', rep=None, spo=':@%s: „Åå„Éà„Ç•„ÉºÊ∂à„Åó„Åó„Åü„Çà„Éº‚Ä¶‚Ä¶'%row[0], media_ids=None, interval=0)
                    SM.update(row[0], 'func', score=-1)
                    sleep(0.2)

                del_accts.append(acct)
                if len(del_accts) > 3:
                    del_accts.pop(0)

        except Exception as e:
            print(e)
            kiri_util.error_log()
            # sleep(30)
            # th_delete()

#######################################################
# „Éí„É≥„Éà„Åß„Éî„É≥„Éà„Ç≤„Éº„É†
def th_hint_de_pinto(gtime=20):
    def th_shududai(acct,id,term):
        paths = gi.get_images_forQ(term)
        # paths = kiri_util.fetch_and_save_img(term)
        if len(paths) > 0:
            path = random.choice(paths)
        else:
            toot('@%s ÁîªÂÉè„ÅåË¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„Åü„ÉºÔºÅ'%acct, g_vis='direct', rep=id)
            junbiTM.reset(0)
            return
        img = Image.open(path).convert('RGB')
        if path.rsplit('.')[-1] == 'jpg':
            ex = 'jpeg'
        else:
            ex = path.rsplit('.')[-1]

        y = int(img.height/10)
        loop = 0
        hint_text = "„Å™„Åó"
        mask_map = [i for i in range(len(term))]
        for i in range(y,1,- int(y*3/10)):
            if len(break_flg) == 0:
                tmp = img.resize((int(img.width/i), int(img.height/i)),Image.NEAREST)  #LANCZOS BICUBIC NEAREST
                tmp = tmp.resize((img.width, img.height),Image.NEAREST)
                filename = path.split('.')[0] + '_{0}.png'.format(y)
                tmp.save(filename, "png")
                media_files = []
                media_files.append(mastodon.media_post(filename, 'image/' + ex))
                toot_now = "„Åï„Å¶„ÄÅ„Åì„Çå„ÅØ‰Ωï/Ë™∞„Åß„Åó„Çá„ÅÜ„ÅãÔºü\n„Éí„É≥„ÉàÔºö{0}\n#„Åç„Çä„Åü„Çì„ÅÆ„Éí„É≥„Éà„Åß„Éî„É≥„Éà #exp15m".format(hint_text)
                toot(toot_now, g_vis='unlisted', rep=None, spo=None, media_ids=media_files)
                for _ in range(60):
                    sleep(1)
                    if len(break_flg) > 0:
                        break
            else:
                break

            loop += 1
            loop_cnt.append(loop)
            if loop == 1:
                hint_text = "‚óã"*len(term)
            elif len(term) > loop - 1:
                # hint_text = term[0:loop-1] + "‚óã"*(len(term) - (loop-1))
                random.shuffle(mask_map)
                mask_map.pop()
                hint_text = ""
                for i,c in enumerate(term):
                    if i in mask_map:
                        hint_text += "‚óã"
                    else:
                        hint_text += c

        # sleep(1)
        media_files = []
        media_files.append(mastodon.media_post(path, 'image/' + ex))
        toot_now = "Ê≠£Ëß£„ÅØ{0}„Åß„Åó„Åü„ÄúÔºÅ\nÔºàÂá∫È°å :@{1}: Ôºâ #exp15m".format(term,acct)
        toot(toot_now, g_vis='unlisted', rep=None, spo=None, media_ids=media_files,interval=4)

    # gi = kiri_util.get_images(BING_KEY)
    gi = kiri_util.get_images_GGL(GOOGLE_KEY,GOOGLE_ENGINE_KEY)
    junbiTM = kiri_util.KiriTimer(30*60)
    junbiTM.reset(gtime*60)
    junbiTM.start()
    while True:
        tmp_list = HintPintoQ.get()
        g_acct,g_id,term = tmp_list[0], tmp_list[1], tmp_list[2]

        if junbiTM.check() > 0:
            sleep(3)
            remaintm = junbiTM.check()
            toot('@%s\nÈñãÂÇ¨Ê∫ñÂÇô‰∏≠„Å†„Çà„ÉºÔºÅ„ÅÇ„Å®%dÂàÜ%dÁßíÂæÖ„Å£„Å¶„Å≠„ÉºÔºÅ'%(g_acct,remaintm//60,remaintm%60), 'direct', g_id, None)
            sleep(27)
            continue

        HintPinto_flg.append('ON')
        break_flg = []
        loop_cnt = []
        th = threading.Thread(target=th_shududai, args=(g_acct,g_id,term))
        th.start()
        while True:
            acct, _, ans, *_ = HintPinto_ansQ.get()
            if not th.is_alive():
                break
            if g_acct != acct and term in ans:
                loop = len(loop_cnt)
                score = min([10,len(term)])*8//(2**loop)
                toot(f'((( :@{acct}: ))) Ê≠£Ëß£„ÄúÔºÅ', g_vis='unlisted', rep=None, spo=None)
                SM.update(acct, 'getnum', score=score//1)
                SM.update(g_acct, 'getnum', score=score//2)
                break_flg.append('ON')
                toot('Ê≠£Ëß£ËÄÖ„Å´„ÅØ{0}ÁÇπ„ÄÅÂá∫È°åËÄÖ„Å´„ÅØ{1}ÁÇπÂÖ•„Çã„Çà„ÉºÔºÅ'.format(score//1, score//2), g_vis='unlisted', rep=None, spo=None, interval=8)

                break

        th.join()
        #„Ç≤„Éº„É†ÁµÇ‰∫ÜÂæå„ÄÅÊ¨°ÂõûÈñãÂßã„Åæ„Åß„ÅÆÊ∫ñÂÇôÊúüÈñì
        HintPinto_flg.remove('ON')
        junbiTM.reset()
        junbiTM.start()

#######################################################
# Êï∞Âèñ„Çä„Ç≤„Éº„É†
def th_gettingnum(gtime=30):
    gamenum = 100
    junbiTM = kiri_util.KiriTimer(60*60)
    junbiTM.reset(gtime*60)
    junbiTM.start()
    gameTM = kiri_util.KiriTimer(240)
    while True:
        try:
            g_acct,g_id = GetNumQ.get()
            if junbiTM.check() > 0:
                remaintm = junbiTM.check()
                toot('@%s\nÈñãÂÇ¨Ê∫ñÂÇô‰∏≠„Å†„Çà„ÉºÔºÅ„ÅÇ„Å®%dÂàÜ%dÁßíÂæÖ„Å£„Å¶„Å≠„ÉºÔºÅ'%(g_acct,remaintm//60,remaintm%60), 'unlisted', g_id, None)
                continue

            #„Ç¢„ÇØ„ÉÜ„Ç£„Éñ‰∫∫Êï∞Á¢∫Ë™ç
            # i = DAO.get_gamenum()
            # if  i <= 10:
            #     toot('@%s\n‰∫∫Â∞ë„Å™„ÅÑ„Åã„Çâ„Åæ„ÅüÂæå„Åß„Å≠„ÉºÔºÅ'%g_acct, 'unlisted', g_id, None)
            #     continue

            #„Ç≤„Éº„É†ÈñãÂßã„ÉºÔºÅ
            fav_now(g_id)
            gm = kiri_game.GettingNum(gamenum)
            gameTM.reset()
            gameTM.start()
            toot('üî∏1„Äú%d„ÅÆ‰∏≠„Åã„ÇâË™∞„Å®„ÇÇË¢´„Çâ„Å™„ÅÑÊúÄÂ§ß„ÅÆÊï¥Êï∞„Å´ÊäïÁ•®„Åó„Åü‰∫∫„ÅåÂãù„Å°„Å†„Çà„ÉºÔºÅ\
                    \nüî∏„Åç„Çä„Åº„Å£„Å®„Å´„É°„É≥„Ç∑„Éß„É≥ÔºàÔº§Ôº≠ÂèØÔºâ„ÅßÊäïÁ•®„Åó„Å¶„Å≠ÔºÅ\
                    \nüî∏Âà∂ÈôêÊôÇÈñì„ÅØ%dÂàÜ„Å†„Çà„ÉºÔºÅ„ÅØ„Åò„ÇÅÔºÅÔºÅ\n#Êï∞Âèñ„Çä„Ç≤„Éº„É† #„Åç„Çä„Åº„Å£„Å®'%(gamenum,int(gameTM.check()/60)), 'public', None, 'üí∏Êï∞Âèñ„Çä„Ç≤„Éº„É†Ôºà„Éü„ÉãÔºâÂßã„Åæ„Çã„Çà„ÉºÔºÅüéÆ')
            GetNum_flg.append('ON')
            try:
                #ÊÆã„ÇäÔºëÂàÜÂá¶ÁêÜ
                remaintm = gameTM.check()
                toot('Êï∞Âèñ„Çä„Ç≤„Éº„É†Ôºà„Éü„ÉãÔºâÊÆã„ÇäÔºëÂàÜ„Å†„Çà„ÉºÔºÅ(1„Äú%d)\
                \n#Êï∞Âèñ„Çä„Ç≤„Éº„É† #„Åç„Çä„Åº„Å£„Å®'%(gamenum,), 'public',interval=remaintm - 60)
                while True:
                    remaintm = gameTM.check()
                    if remaintm > 0:
                        #ÊôÇÈñìÂàá„Çå„ÅØ‰æãÂ§ñ„ÅßÊäú„Åë„Çã
                        acct,id,num = GetNumVoteQ.get(timeout=remaintm)
                        if gm.vote(acct,num):
                            fav_now(id)
                            if  acct == 'twotwo':
                                toot('@%s\n%d„Å†„Å≠„ÉºÔºÅ„Çè„Åã„Å£„Åü„ÉºÔºÅ'%(acct,num), 'direct', id, None)
                        else:
                            toot('@%s\nŸ©(‡πë`^¬¥‡πë)€∂ÁØÑÂõ≤Â§ñ„Å†„Çà„ÉºÔºÅ'%acct, 'direct', id, None)
                    else:
                        #ÊôÇÈñìÂàá„Çå
                        break
            except queue.Empty:
                pass
            #„Ç≤„Éº„É†ÁµÇ‰∫ÜÂæå„ÄÅÊ¨°ÂõûÈñãÂßã„Åæ„Åß„ÅÆÊ∫ñÂÇôÊúüÈñì
            GetNum_flg.remove('ON')
            junbiTM.reset()
            junbiTM.start()
            results = gm.get_results()
            if sum( list(map(len,results.values())) ) <= 0:
                toot('(‡∏á ‚Ä¢ÃÄœâ‚Ä¢ÃÅ)‡∏á‚úßÊï∞Âèñ„Çä„Ç≤„Éº„É†„ÄÅÔºê‰∫∫„Å†„Å£„Åü„Çà„ÉºÔºÅ\n#Êï∞Âèñ„Çä„Ç≤„Éº„É† #„Åç„Çä„Åº„Å£„Å®', 'public', None, None)
            else:
                toot_now = ''
                hanamaru = False
                score = 0
                for val,accts in sorted(results.items(), key=lambda x: -x[0]):
                    if len(accts) == 0:
                        continue
                    elif len(accts) == 1 and not hanamaru:
                        toot_now += 'üíÆ'
                        hanamaru = True
                        toot_now += '{0:>2}Ôºö'.format(val)
                        for acct1 in accts:
                            toot_now += f'((( :@{acct1}: )))'
                        toot_now += '\n'
                        score = val
                        SM.update(accts[0], 'getnum', score=score)
                    else:
                        toot_now += '‚ùå'
                        toot_now += '{0:>2}Ôºö'.format(val)
                        for acct1 in accts:
                            toot_now += f':@{acct1}: '
                        toot_now += '\n'
                toot('%s\nÂæóÁÇπ„ÅØ%dÁÇπ„Å†„Çà„Éº\n#Êï∞Âèñ„Çä„Ç≤„Éº„É† #„Åç„Çä„Åº„Å£„Å®'%(toot_now,score), 'public', None, 'Êï∞Âèñ„Çä„Ç≤„Éº„É†„ÄÅÁµêÊûúÁô∫Ë°®„Éº„ÉºÔºÅÔºÅ')

        except Exception as e:
            print(e)
            kiri_util.error_log()

#######################################################
# „Éà„Ç•„Éº„Éà„Çí„ÅÑ„Çç„ÅÑ„Çç
def th_saver():
    try:
        while True:
            status = StatusQ.get()
            # Ê•≠ÂãôÈÄ£Áµ°
            business_contact(status)
            # „Éà„Ç•„Éº„Éà„Çí‰øùÂ≠ò
            try:
                # threading.Thread(target=DAO.save_toot, args=(status,))
                DAO.save_toot(status)
            except Exception as e:
                #‰øùÂ≠òÂ§±Êïó„Åó„Åü„Çâ„ÄÅ„Ç≠„É•„Éº„Å´Ë©∞„ÇÅ„Å¶„É™„Éà„É©„Ç§ÔºÅ
                print(e)
                kiri_util.error_log()
                sleep(10)
                StatusQ.put(status)
    except Exception as e:
        print(e)
        kiri_util.error_log()
        sleep(20)
        th_saver()

#######################################################
# „É≠„Éº„Ç´„É´„Çø„Ç§„É†„É©„Ç§„É≥Áõ£Ë¶ñ„Çπ„É¨„ÉÉ„Éâ
def t_local():
    try:
        # mastodon.stream_public(ltl_listener())
        mastodon.stream_local(ltl_listener(),timeout=20)
    except requests.exceptions.ConnectionError as e:
        print("ÔºäÔºäÔºäÂÜçÊé•Á∂ö„Åô„Çã„Çà„Äút_local()ÔºäÔºäÔºä")
        # print(e)
        # kiri_util.error_log()
        sleep(30)
        t_local()
    except Exception as e:
        print(e)
        kiri_util.error_log()
        sleep(30)
        t_local()

#######################################################
# „É≠„Éº„Ç´„É´„Çø„Ç§„É†„É©„Ç§„É≥Áõ£Ë¶ñ„Çπ„É¨„ÉÉ„ÉâÔºàË™çË®º„Å™„ÅóÔºâ
def t_sub():
    try:
        publicdon.stream_local(public_listener(),timeout=20)
        # publicdon.stream_public(public_listener(),timeout=20)
    except requests.exceptions.ConnectionError as e:
        print("ÔºäÔºäÔºäÂÜçÊé•Á∂ö„Åô„Çã„Çà„Äút_sub()ÔºäÔºäÔºä")
        # print(e)
        # kiri_util.error_log()
        sleep(30)
        t_sub()
    except Exception as e:
        print(e)
        kiri_util.error_log()
        sleep(30)
        t_sub()

#######################################################
# „Éõ„Éº„É†„Çø„Ç§„É†„É©„Ç§„É≥Áõ£Ë¶ñ„Çπ„É¨„ÉÉ„Éâ
def t_user():
    try:
        mastodon.stream_user(notification_listener(),timeout=20)
    except requests.exceptions.ConnectionError as e:
        print("ÔºäÔºäÔºäÂÜçÊé•Á∂ö„Åô„Çã„Çà„Äút_user()ÔºäÔºäÔºä")
        # print(e)
        # kiri_util.error_log()
        sleep(30)
        t_user()
    except Exception as e:
        print(e)
        kiri_util.error_log()
        sleep(30)
        t_user()


#######################################################
# „Å´„ÇÉ„Çì„Çø„Ç§„É†
def nyan_time():
    gen_txt = '„Å´„ÇÉ„Çì„Å´„ÇÉ„Çì„Å´„ÇÉ„Çì„Å´„ÇÉ„ÇìÔºÅ\n‚Çç‚ÇçÔºàÔºàÔºàÔΩõÔΩõÔΩõ(‡∏Ö=ÀòÍí≥ Àò=)‡∏ÖÔΩùÔΩùÔΩùÔºâÔºâÔºâ ‚Åæ‚Åæ ‚Çç‚Çç ÔºàÔºàÔºàÔΩõÔΩõÔΩõ‡∏Ö(=‚ïπÍí≥ ‚ïπ=‡∏Ö)ÔΩùÔΩùÔΩùÔºâÔºâÔºâ‚Åæ‚Åæ'
    toot(gen_txt, "public")

#######################################################
# ÊôÇÂ†±
def jihou():
    jst_now = datetime.now(timezone('Asia/Tokyo'))
    hh_now = jst_now.strftime("%H")
    toot(f"((({jihou_dict[hh_now]})))„ÅΩ„Å£„ÅΩ„Äú", "public")

#######################################################
# „Éï„Ç©„É≠Â§ñ„Åó
def th_follow_mente():
    print('üå†„Éï„Ç©„É≠„Éº„Éï„Ç©„É≠„ÉØ„ÉºÊï¥ÁêÜÂá¶ÁêÜ„Éº„ÉºÔºÅÔºÅ')
    ret = mastodon.account_verify_credentials()
    uid = ret['id']
    sleep(2)
    ret = mastodon.account_following(uid, max_id=None, since_id=None, limit=80)
    fids = []
    for account in ret:
        fids.append(account['id'])
    while '_pagination_next' in ret[-1].keys():
        for account in ret:
            fids.append(account['id'])
        max_id = ret[-1]['_pagination_next']['max_id']
        sleep(2)
        ret = mastodon.account_following(uid, max_id=max_id, since_id=None, limit=80)
        for account in ret:
            fids.append(account['id'])
    print('„ÄÄ„ÄÄ„Éï„Ç©„É≠„ÉºÔºö',len(fids))
    sleep(2)
    ret = mastodon.account_followers(uid, max_id=None, since_id=None, limit=80)
    fers = []
    for account in ret:
        fers.append(account['id'])
    while '_pagination_next' in ret[-1].keys():
        for account in ret:
            fers.append(account['id'])
        max_id = ret[-1]['_pagination_next']['max_id']
        sleep(2)
        ret = mastodon.account_followers(uid, max_id=max_id, since_id=None, limit=80)
        for account in ret:
            fers.append(account['id'])
    print('„ÄÄ„ÄÄ„Éï„Ç©„É≠„ÉØ„ÉºÔºö',len(fers))
    sleep(1)
    for u in set(fers) - set(fids):
        print('id=',u)
        try:
            mastodon.account_follow(u)
        except Exception as e:
            print('id=',u,e)
            kiri_util.error_log()
        sleep(2)
    for u in set(fids) - set(fers):
        print('id=',u)
        try:
            mastodon.account_unfollow(u)
        except Exception as e:
            print('id=',u,e)
            kiri_util.error_log()
        sleep(2)

#######################################################
# postÁî®worker
def th_post():
    while True:
        try:
            func,args = PostQ.get()
            func(*args)
            sleep(2)
        except Exception as e:
            print(e)
            kiri_util.error_log()
            sleep(120)
            # th_post()

#######################################################
# Ê∞óË±°ÊÉÖÂ†±ÂèñÂæó„Çπ„É¨„ÉÉ„Éâ
def th_kishou():
    def on_msg_func(msg_doc):
        spo_text = None
        body_text = ""
        if msg_doc['Report']['Control']['Title'] == "ÈúáÂ∫¶ÈÄüÂ†±":
            spo_text = "„Åï„Å£„ÅçÊè∫„Çå„Åü„Åã„ÇÇ„ÄúÔºÅ"
            body_text += f"„Äê{msg_doc['Report']['Head']['Title']}„Äë\n" 
            body_text += msg_doc['Report']['Head']['Headline']['Text'] + "\n"
            tmp_item = []
            if isinstance(msg_doc['Report']['Head']['Headline']['Information']['Item'], list):
                tmp_item.extend(msg_doc['Report']['Head']['Headline']['Information']['Item'])
            else:
                tmp_item.append(msg_doc['Report']['Head']['Headline']['Information']['Item'])
            # ÈúáÂ∫¶Âà•„Å´Âú∞ÂüüÂêç„ÇíÂá∫Âäõ
            for i in tmp_item:
                body_text += f"‚ñ†{i['Kind']['Name']}\n"
                tmp_areas = []
                if isinstance(i['Areas']['Area'], list):
                    tmp_areas.extend(i['Areas']['Area'])
                else:
                    tmp_areas.append(i['Areas']['Area'])

                for a in tmp_areas:
                    body_text += a['Name'] + "„ÄÅ"
                else:
                    body_text = body_text[:-1] + '\n'

        elif msg_doc['Report']['Control']['Title'] == "Á´úÂ∑ªÊ≥®ÊÑèÊÉÖÂ†±ÔºàÁõÆÊíÉÊÉÖÂ†±‰ªò„ÅçÔºâ":
            spo_text = "üå™Á´úÂ∑ª„Å†„ÄúÔºÅ"
            body_text += f"„Äê{msg_doc['Report']['Head']['Title']}„Äë\n" 
            body_text += msg_doc['Report']['Head']['Headline']['Text'] + "\n"
        elif msg_doc['Report']['Control']['Title'] == "Ê∞óË±°ÁâπÂà•Ë≠¶Â†±„ÉªË≠¶Â†±„ÉªÊ≥®ÊÑèÂ†±":
            spo_text = "Ê∞óË±°ÁâπÂà•Ë≠¶Â†±Âá∫„Å¶„Çã„Çà„ÄúÔºÅÊ≥®ÊÑè„Åó„Å¶„Å≠„ÄúÔºÅ"
            body_text += f"„Äê{msg_doc['Report']['Head']['Title']}„Äë\n" 
            if "ÁâπÂà•Ë≠¶Â†±" in msg_doc['Report']['Head']['Headline']['Text']:
                body_text += msg_doc['Report']['Head']['Headline']['Text'] + "\n"
            else:
                return
        elif msg_doc['Report']['Control']['Title'] == "Ë®òÈå≤ÁöÑÁü≠ÊôÇÈñìÂ§ßÈõ®ÊÉÖÂ†±":
            spo_text = "‚òîÂ§ßÈõ®Ê≥®ÊÑè„Åó„Å¶„Å≠„ÄúÔºÅ"
            body_text += f"„Äê{msg_doc['Report']['Head']['Title']}„Äë\n" 
            body_text += msg_doc['Report']['Head']['Headline']['Text'] + "\n"
        elif msg_doc['Report']['Control']['Title'] == "Âô¥ÁÅ´ÈÄüÂ†±":
            spo_text = "üåãÂô¥ÁÅ´„Å†„ÄúÔºÅ"
            body_text += f"„Äê{msg_doc['Report']['Head']['Title']}„Äë\n" 
            body_text += msg_doc['Report']['Head']['Headline']['Text'] + "\n"
        # elif msg_doc['Report']['Control']['Title'] == "Ê∞óË±°Ë≠¶Â†±„ÉªÊ≥®ÊÑèÂ†±":
        #     spo_text = "„ÉÜ„Çπ„Éà„Åß„Éº„Åô"
        #     body_text += f"„Äê{msg_doc['Report']['Head']['Title']}„Äë\n" 
        #     body_text += msg_doc['Report']['Head']['Headline']['Text'] + "\n"
        else:
            return
        
        body_text += "\n„Ääfrom Ê∞óË±°Â∫ÅÈò≤ÁÅΩÊÉÖÂ†±„Äã"
        # toot(f"@kiritan \n{body_text}", g_vis='direct', spo=f"{spo_text}")
        toot(body_text, g_vis='public', spo=f"{spo_text}")

    kishou = kiri_kishou.Kirikishou(ws_url=KISHOU_WS, ws_port=KISHOU_WS_PORT, kishou_target=kishou_target, on_msg_func=on_msg_func)
    # ‰∏ÄÂøúÔºëÔºêÂõû„Åæ„Åß„É™„Éà„É©„Ç§„Åô„Çã„ÇÑ„Å§
    for _ in range(10):
        try:
            # ÂæÖÊ©ü‰∏≠„ÅØÂ∏∞„Å£„Å¶„Åì„Å™„ÅÑ„ÇÑ„Å§
            kishou.connect_run_forever()
        except Exception as e:
            print(e)
            kiri_util.error_log()
            sleep(300)

#######################################################
# „É°„Ç§„É≥
def main():
    args = get_args()
    threads = []
    #„Çø„Ç§„É†„É©„Ç§„É≥Âèó‰ø°Á≥ª
    threads.append( threading.Thread(target=t_local ) ) #LTL
    threads.append( threading.Thread(target=t_user ) ) #LTL
    threads.append( threading.Thread(target=t_sub ) ) #LTL
    #„Çø„Ç§„É†„É©„Ç§„É≥ÂøúÁ≠îÁ≥ª
    threads.append( threading.Thread(target=th_delete) )
    threads.append( threading.Thread(target=th_saver) )
    threads.append( threading.Thread(target=th_gettingnum, args=(args.gtime,)) )
    threads.append( threading.Thread(target=th_hint_de_pinto, args=(args.htime,)) )
    threads.append( threading.Thread(target=th_worker) )
    # threads.append( threading.Thread(target=th_timerDel) )
    threads.append( threading.Thread(target=th_post) )
    #„Çπ„Ç±„Ç∏„É•„Éº„É´Ëµ∑ÂãïÁ≥ª(ÊôÇÂàª)
    threads.append( threading.Thread(target=kiri_util.scheduler, args=(bottlemail_sending,['**:05'])) )
    threads.append( threading.Thread(target=kiri_util.scheduler, args=(th_follow_mente,['04:00'])) )
    threads.append( threading.Thread(target=kiri_util.scheduler, args=(nyan_time,['22:22'])) )
    threads.append( threading.Thread(target=kiri_util.scheduler, args=(show_rank,['07:00'])) )
    threads.append( threading.Thread(target=kiri_util.scheduler, args=(jihou,['**:00'])) )
    #„Çπ„Ç±„Ç∏„É•„Éº„É´Ëµ∑ÂãïÁ≥ª(ÈñìÈöî)
    threads.append( threading.Thread(target=kiri_util.scheduler_rnd, args=(lstm_tooter,60,-10,4,CM)) )
    threads.append( threading.Thread(target=kiri_util.scheduler_rnd, args=(jinkei_tooter,120,-10,10,CM)) )
    #Â§ñÈÉ®„Çπ„Éà„É™„Éº„É†Âèó‰ø°
    threads.append( threading.Thread(target=th_kishou ) ) #LTL

    for th in threads:
        th.start()

if __name__ == '__main__':
    main()
